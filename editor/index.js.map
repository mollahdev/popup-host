{"version":3,"file":"index.js","mappings":"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","sources":["webpack://popup-host/./src/inc/base.js","webpack://popup-host/./src/inc/global-controls.js","webpack://popup-host/./src/customizer.js","webpack://popup-host/./src/inc/sidebar.js"],"sourcesContent":["/**\r\n * \r\n * \r\n * @class ControlBase\r\n * @description ths class is responsible to simplify control creation\r\n * \r\n */ \r\nexport default class ControlBase {\r\n    config = {}\r\n    css = ''\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Merge controls\r\n     * \r\n    */\r\n    constructor() {\r\n        const self = this;\r\n        this.registerControls.apply({\r\n\r\n            addControl: function( id, props ) {\r\n                \r\n                if( props.selector ) {\r\n                    props.prefix = '#popup ';\r\n                    self.css += props.prefix + props.selector.call(props) + '\\n\\n';\r\n                }\r\n\r\n                props.isLabelInline = props.isLabelInline || false;\r\n                self.config[id] = props;\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static text( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"text\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static color( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"color\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * slider control \r\n     * \r\n     */ \r\n    static slider( props, key ) {\r\n        return (\r\n            `<div class=\"slider-control\">\r\n                <input\r\n                    class=\"popup-control--trigger\"\r\n                    data-key=${key}\r\n                    type=\"range\"\r\n                    min=\"0\"  \r\n                    max=${props.max}  \r\n                    step=${props.step} \r\n                    value=${props.default}               \r\n                >\r\n                <span class=\"value\">${props.default}px</span>\r\n            </div>\r\n            `\r\n        )\r\n    }\r\n}","import ControlBase from \"./base\";\r\n\r\nexport default class GlobalControls extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            sheet: 'popup-stylesheet'\r\n        }\r\n    }\r\n\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('global_popup_bg', {\r\n            label: 'Popup Background Color',\r\n            type: 'color',\r\n            default: '#e07a5f',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    background-color: ${this.default};\r\n                    box-shadow: 0px 0px 0 var(--border-width) ${this.default};\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_border_color', {\r\n            label: 'Popup Border Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-color: ${this.default};\r\n                    border-style: solid;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_border_width', {\r\n            label: 'Popup Border Width',\r\n            type: 'slider',\r\n            default: 5,\r\n            max: 50,\r\n            step:1,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-width: ${this.default}px;\r\n                    --border-width: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_radius', {\r\n            label: 'Popup Radius',\r\n            type: 'slider',\r\n            default: 500,\r\n            max: 500,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-radius: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_width', {\r\n            label: 'Popup Width',\r\n            type: 'slider',\r\n            default: 400,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    width: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_height', {\r\n            label: 'Popup Height',\r\n            type: 'slider',\r\n            default: 400,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    height: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n    \r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import Sidebar from \"./inc/sidebar\";\r\nimport GlobalControls from \"./inc/global-controls\";\r\n\r\nclass Customizer extends Sidebar {\r\n\r\n    constructor() {\r\n        super()\r\n        window.addEventListener('DOMContentLoaded', this.init.bind(this) );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create controls for sidebar\r\n     * @class GlobalControls returns the global controls settings\r\n     * \r\n     */ \r\n    createControls(type) {\r\n        this.createControlMarkup( this.globalControls, type )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create Widgets Markup for sidebar \r\n     * \r\n     */ \r\n\r\n    createWidget() {\r\n        this.createWidgetMarkup()\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * Generate stylesheet \r\n     * \r\n     */ \r\n    generateStyleSheet() {\r\n\r\n        // generate global stylesheet\r\n        jQuery('head').append('<style id=\"global-settings\">' + this.globalControls.css + '</style>');\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Initalize customizer script\r\n     * \r\n     */ \r\n    init() {\r\n        const self = this;\r\n        self.globalControls = new GlobalControls();\r\n        self.sidebarInit();\r\n        self.createWidget();\r\n        self.generateStyleSheet();\r\n\r\n        // change sidebar markup based on what settings user want \r\n        jQuery(document).on('click', '.page-settings, .all-widget', function() {\r\n\r\n            const type = this.dataset.type;\r\n            switch( type ) {\r\n                case 'global-settings':\r\n                self.createControls.call(self, type);\r\n                break;\r\n                \r\n                case 'all-widgets':\r\n                self.createWidget.call(self, type);\r\n                break;\r\n            }\r\n\r\n            // update scrollbar \r\n            self.sidebarSettings.ps.update()\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\nnew Customizer();","import ControlBase from \"./base\";\r\nexport default class Sidebar {\r\n    sidebarSettings = {\r\n        wheelSpeed: 2,\r\n        wheelPropagation: true,\r\n        minScrollbarLength: 20\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * attach perfect scrollbar plugin into sidebar \r\n     */ \r\n    sidebarInit() {\r\n        const ps  = new PerfectScrollbar('.customizer__sidebar--content', this.sidebarSettings );\r\n        this.sidebarSettings.ps = ps;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create markup for controls \r\n     * \r\n     */ \r\n    createControlMarkup( config, sheetName ) {\r\n        const { controls } = config;\r\n\r\n        // generate control markup\r\n        const componentMarkup = Object.keys(controls).map( key => {\r\n            const attr = controls[key];\r\n            const component = ControlBase[attr.type]\r\n            \r\n            if( !component ) {\r\n                return '';\r\n            }\r\n\r\n            return `\r\n                <div class=\"control-item\" data-inline=\"${attr.isLabelInline}\">\r\n                    <label> ${ attr.label } </label>\r\n                    <div class=\"control-item--field field-type-${attr.type}\">\r\n                        ${component(attr, key)}\r\n                    </div>\r\n                </div>\r\n            `\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.sidebar-container').html( `\r\n            <div class=\"control-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n\r\n        jQuery('.sidebar-container').on('input', '.popup-control--trigger', function() {\r\n            \r\n            const value = this.value;\r\n            const key = this.dataset.key\r\n            let css = ''; \r\n\r\n            // generate style for popup\r\n            controls[key].default = value;\r\n            Object.values( controls ).forEach( control => {\r\n                if( control.selector ) {\r\n                    css += control.prefix + control.selector.call(control) + '\\n\\n';\r\n                }\r\n            })\r\n\r\n            // change old stylesheet with new styles\r\n            if( controls[key].selector ) {\r\n               jQuery(`#${sheetName}`).text(css)\r\n            }\r\n\r\n            //update range slider value\r\n            if( this.type === 'range' ) {\r\n                this.nextElementSibling.innerText = value + 'px'\r\n            }\r\n\r\n        })\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create widget markup \r\n     * \r\n     */ \r\n    createWidgetMarkup( ) {\r\n        const componentMarkup = `\r\n            <div class=\"popup-element\">\r\n                <div class=\"popup-widget\" draggable=\"true\">\r\n                    <i class=\"popup-widgets\"></i>\r\n                    <label>Text</label>\r\n                </div>\r\n            </div>\r\n            <div class=\"popup-element\">\r\n                <div class=\"popup-widget\" draggable=\"true\">\r\n                    <i class=\"popup-widgets\"></i>\r\n                    <label>Text</label>\r\n                </div>\r\n            </div>\r\n            <div class=\"popup-element\">\r\n                <div class=\"popup-widget\" draggable=\"true\">\r\n                    <i class=\"popup-widgets\"></i>\r\n                    <label>Text</label>\r\n                </div>\r\n            </div>\r\n        `\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.sidebar-container').html( `\r\n            <div class=\"widget-container\">\r\n                ${componentMarkup}\r\n            </div>\r\n        ` );\r\n\r\n    }\r\n\r\n\r\n}"],"names":["ControlBase","config","css","constructor","self","this","registerControls","apply","addControl","id","props","selector","prefix","call","isLabelInline","key","default","max","step","GlobalControls","super","controls","sheet","label","type","sidebarSettings","wheelSpeed","wheelPropagation","minScrollbarLength","sidebarInit","ps","PerfectScrollbar","createControlMarkup","sheetName","componentMarkup","Object","keys","map","attr","component","jQuery","html","join","on","value","dataset","values","forEach","control","text","nextElementSibling","innerText","createWidgetMarkup","window","addEventListener","init","bind","createControls","globalControls","createWidget","generateStyleSheet","append","document","update"],"sourceRoot":""}
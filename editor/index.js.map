{"version":3,"file":"index.js","mappings":"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","sources":["webpack://popup-host/./src/inc/base.js","webpack://popup-host/./src/inc/state.js","webpack://popup-host/./src/widgets/index.js","webpack://popup-host/./src/widgets/text-widget.js","webpack://popup-host/./src/widgets/star-widget.js","webpack://popup-host/./src/inc/cssom.js","webpack://popup-host/./src/inc/global-controls.js","webpack://popup-host/./src/customizer.js","webpack://popup-host/./src/inc/sidebar.js"],"sourcesContent":["/**\r\n * \r\n * \r\n * @class ControlBase\r\n * @description ths class is responsible to simplify control creation\r\n * \r\n */ \r\nexport default class ControlBase {\r\n    config = {}\r\n    /**\r\n     * \r\n     * \r\n     * Merge controls\r\n     * \r\n    */\r\n    constructor() {\r\n        const self = this;\r\n\r\n        // collect widget attribute\r\n        if( this.setWidgetAttribute ) {\r\n            self.config.widgetAttribute = this.setWidgetAttribute();\r\n        }\r\n\r\n        // bind controls with render method\r\n        if( this.render ) {\r\n            self.config.widgetAttribute.render = this.render.bind(self.config);\r\n        }\r\n\r\n        // register the controls with widget\r\n        this.registerControls.apply({\r\n            addControl: function( id, props ) {\r\n                props.isLabelInline = props.isLabelInline || false;\r\n                self.config[id] = props;\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * select control \r\n     * \r\n     */ \r\n    static select( props, key ) {\r\n\r\n        return (\r\n            `<select value=\"${props.default}\" data-key=${key} type=\"select\" class=\"popup-control--trigger\">\r\n                ${\r\n                    (()=>{\r\n                        const options = Object.keys(props.options).map( item =>{\r\n                            return `<option value=\"${item}\">${props.options[item]}</option>`\r\n                        })\r\n                        return options.join('');\r\n                    })()\r\n                }\r\n            </select>\r\n            `\r\n        )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static text( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"text\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * number control \r\n     * \r\n     */ \r\n    static number( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"number\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * color control \r\n     * \r\n     */ \r\n    static color( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"color\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * slider control \r\n     * \r\n     */ \r\n    static slider( props, key ) {\r\n        return (\r\n            `<div class=\"slider-control\">\r\n                <input\r\n                    class=\"popup-control--trigger\"\r\n                    data-key=${key}\r\n                    type=\"range\"\r\n                    min=\"0\"  \r\n                    max=${props.max}  \r\n                    step=${props.step} \r\n                    value=${props.default}               \r\n                >\r\n                <span class=\"value\">${props.default}px</span>\r\n            </div>\r\n            `\r\n        )\r\n    }\r\n}","let STORAGE = {\r\n    global: {}\r\n};\r\n\r\nconst state = {\r\n    get() {\r\n        return STORAGE\r\n    },\r\n    set( value ) {\r\n        STORAGE = value;\r\n    },\r\n    add( property, value ) {\r\n        STORAGE[property] = value;\r\n    }, \r\n    remove( property ) {\r\n        delete STORAGE[property]\r\n    } \r\n}\r\n\r\nexport default state\r\n","import TextWidget from \"./text-widget\";\r\nimport StarWidget from \"./star-widget\";\r\n// import FieldWidget from \"./field-widget\";\r\n// import ButtonWidget from \"./button-widget\";\r\n// import CloseButtonWidget from \"./close-button-widget\";\r\n\r\nconst widgets = {\r\n    text_widget: new TextWidget(),\r\n    star_widget: new StarWidget(),\r\n    // field_widget: new FieldWidget(),\r\n    // button_widget: new ButtonWidget(),\r\n    // close_button_widget: new CloseButtonWidget(),\r\n}\r\n\r\nexport default widgets;","import ControlBase from \"../inc/base\";\r\nexport default class TextWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return this.config;\r\n    }\r\n\r\n    setWidgetAttribute() {\r\n        return {\r\n            id: 'text_widget',\r\n            icon: 'title',\r\n            name: 'Text Widget'\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        this.addControl('text_content', {\r\n            label: 'Text Color',\r\n            type: 'text',\r\n            default: 'No credit card required. No Surprises ',\r\n            selector: function( wrapper, value ) {\r\n                const scope = jQuery(wrapper)\r\n                if( scope.length ) {\r\n                    scope.find('span').text(value)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.addControl('text_font_weight', {\r\n            label: 'Font Weight',\r\n            type: 'select',\r\n            default: 400,\r\n            options: {\r\n                400: 'Regular',\r\n                700: 'Medium',\r\n                900: 'Bold'\r\n            },\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    font-weight: ${value};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('text_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function(wrapper, value) {\r\n                return `${wrapper} span {\r\n                    color: ${value};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('text_font_size', {\r\n            label: 'Text Font Size',\r\n            type: 'slider',\r\n            default: 18,\r\n            max: 100,\r\n            step:1,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    font-size: ${value}px;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        \r\n        this.addControl('text_width', {\r\n            label: 'Width',\r\n            type: 'slider',\r\n            default: 250,\r\n            max: 800,\r\n            step:1,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    width: ${value}px;\r\n                    display: inline-block;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('zindex', {\r\n            label: 'Z-Index',\r\n            type: 'number',\r\n            default: 1,\r\n            isLabelInline: true,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} {\r\n                    z-index: ${value};\r\n                }`\r\n            }\r\n        })\r\n    }\r\n    \r\n    render( wrapper_id ) {\r\n        return `\r\n            <div class=\"popup-widget-element apb-${wrapper_id}\" data-uid=\"${wrapper_id}\" id=\"text_widget\" data-type=\"widget\">\r\n                <i class=\"remove-btn\">x</i>\r\n                <div>\r\n                    <span>${this.text_content.default}</span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\nexport default class StarWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return this.config;\r\n    }\r\n\r\n    setWidgetAttribute() {\r\n        return {\r\n            id: 'star_widget',\r\n            icon: 'star',\r\n            name: 'Star'\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('star_color', {\r\n            label: 'Star Color',\r\n            type: 'color',\r\n            default: '#c75943',\r\n            isLabelInline: true,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    color: ${value};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('star_size', {\r\n            label: 'Star Size',\r\n            type: 'slider',\r\n            default: 44,\r\n            max: 200,\r\n            step:1,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    font-size: ${value}px;\r\n                    display: unset;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('zindex', {\r\n            label: 'Z-Index',\r\n            type: 'number',\r\n            default: 1,\r\n            isLabelInline: true,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} {\r\n                    z-index: ${value};\r\n                }`\r\n            }\r\n        })\r\n    }\r\n\r\n    render( wrapper_id ) {\r\n        return `\r\n            <div class=\"popup-widget-element apb-${wrapper_id}\" data-uid=\"${wrapper_id}\" id=\"star_widget\" data-type=\"widget\">\r\n                <i class=\"remove-btn\">x</i>\r\n                <div>\r\n                    <span class=\"material-icons-outlined\">star</span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n    \r\n\r\n}\r\n\r\n","/**\r\n * \r\n * \r\n * @author Ashraf\r\n * @version 1.0.0\r\n * @last_update 15th January 2021\r\n * @email mollah.dev@gmail.com\r\n * @class StylesheetManager\r\n * @description this class is responsible for managing stylesheet. \r\n * It helps to keep unique selector and style by merging them together \r\n */ \r\n\r\n class StylesheetManager {\r\n    rule = {};\r\n    constructor( id ) {\r\n        this.styleSheetId = id;\r\n        this.fetchStylesheet();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * get seperate selector and style \r\n     * \r\n     */ \r\n    seperateStyle( initialStyle ) {\r\n        const selector = initialStyle.split('{')[0].trim().replace(/\\s{2,}/g, ' ');\r\n        const style = initialStyle.split('{')[1].trim().replace(/[&\\/\\\\,$~.?<>{}]/g, '').replace(/\\s{2,}/g, ' ');\r\n\r\n        return {\r\n            selector, style\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * collect all the css and return as string\r\n     * \r\n     */ \r\n    getCSS() {\r\n        const promise = new Promise((resolve, reject) => {\r\n            let css = '';\r\n            for( let selector in this.rule ) {\r\n                const style = this.rule[selector].style;\r\n                css += `${selector} {${style}}`;\r\n            }\r\n\r\n            document.getElementById(this.styleSheetId).innerText = css;\r\n            this.rule = {};\r\n            this.fetchStylesheet();\r\n            resolve(css)\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param selectors this arguments contains multiple selector\r\n     * \r\n     */ \r\n    delete( selectors ) {\r\n        for( let selector of selectors ) {\r\n            selector = selector.trim();\r\n            delete this.rule[selector]\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * inert rules into the cssom\r\n     * if the selector already created, put the new new style into the existing rule otherwise create a new rule\r\n     * @param selector dom selector\r\n     * @param newStyle css properties and values\r\n     * \r\n     */\r\n\r\n    insert( selector, newStyle ) {\r\n        selector = selector.trim();\r\n\r\n        // check is the selector exists\r\n        if( this.rule[selector] ) {\r\n            const index = this.rule[selector].index;\r\n            const style = this.sheet.rules.item(index).style;\r\n\r\n            newStyle.split(';').map( item => {\r\n                let property = item.split(':')[0]\r\n                let value = item.split(':')[1]\r\n                if( property && value ) {\r\n                    \r\n                    \r\n\r\n                    const isImportant = value.includes('important') ? 'important' : '';\r\n                    if( isImportant === 'important' ) {\r\n                        value = value.split('!')[0];\r\n                    } \r\n                    \r\n                    style.setProperty(property.trim(), value.trim(), isImportant );\r\n                    this.rule[selector].style = style.cssText;\r\n                    \r\n                }\r\n            })\r\n\r\n        }else {\r\n            this.rule[selector] = {\r\n                index: this.length, \r\n                style: newStyle\r\n            }\r\n            this.sheet.insertRule(`${selector} {${newStyle}}`, this.length);\r\n            this.length = this.sheet.rules.length\r\n        }\r\n    } \r\n    /*\r\n     * \r\n     * \r\n     * Get css declaration\r\n     */ \r\n    cssDeclaration( str, selector ) {\r\n        const declaration = str.split(selector).pop().replace(/[&\\/\\\\,$~.?<>{}]/g, '')\r\n        return declaration.trim()\r\n    }\r\n    /**\r\n     * \r\n     * \r\n     * this method will run when stylesheet load first time\r\n     * \r\n     */ \r\n    mergeRule( sheet, selector, i ) {\r\n        const prevStyle = this.rule[selector].style;\r\n        const nextRule  = sheet.rules.item(i);\r\n        let nextStyle   = this.cssDeclaration( nextRule.cssText, selector );\r\n        this.rule[selector].style = nextStyle + prevStyle\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Get stylesheet from DOM\r\n     * \r\n     */ \r\n    fetchStylesheet() {\r\n\r\n        const sheet = document.getElementById(this.styleSheetId).sheet;\r\n        const rules = sheet.rules;\r\n        const keys  = Object.keys(rules).reverse();\r\n\r\n        for( let i of keys ) {\r\n            const rule = rules[i];\r\n            if( typeof rule === 'object' ) {\r\n                const selector = rule.selectorText\r\n                if( Reflect.has(this.rule, selector) ) {\r\n                    this.rule[selector].index = i;\r\n                    this.mergeRule( sheet, selector, i );\r\n                    sheet.deleteRule(i)\r\n                } \r\n                else {\r\n                    this.rule[selector] = {\r\n                        index : i,\r\n                        style : this.cssDeclaration(rule.cssText, selector)\r\n                    };\r\n                }  \r\n            }\r\n        }\r\n\r\n        // insert the merged css into the stylesheet\r\n        // Note : this code will execute when stylesheet load first time\r\n\r\n        let i = 0;\r\n        for( let selector in this.rule ) {\r\n            this.rule[selector].index = i;\r\n            const style = this.rule[selector].style;\r\n            sheet.deleteRule(i);\r\n            sheet.insertRule(`${selector} {${style}}`, i);\r\n            i++;\r\n        }\r\n        \r\n        // assigned the filtered and merged css rules into the class\r\n        this.sheet = sheet;\r\n        this.length= sheet.rules.length;\r\n    }\r\n}\r\n\r\n\r\nconst cssom = new StylesheetManager('builder-css');\r\nexport default cssom;","import ControlBase from \"./base\";\r\nexport default class GlobalControls extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return this.config;\r\n    }\r\n\r\n    setWidgetAttribute() {\r\n        return {\r\n            id: 'global',\r\n            icon: 'title',\r\n            name: 'Popup Settings'\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('global_popup_bg', {\r\n            label: 'Popup Background Color',\r\n            type: 'color',\r\n            default: '#e07a5f',\r\n            isLabelInline: true,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} .apb-wrapper {\r\n                    background-color: ${value};\r\n                }`\r\n            }\r\n        })\r\n        \r\n\r\n        this.addControl('global_popup_radius', {\r\n            label: 'Popup Radius',\r\n            type: 'slider',\r\n            default: 500,\r\n            max: 500,\r\n            step:10,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} .apb-wrapper {\r\n                    border-radius: ${value}px;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_width', {\r\n            label: 'Popup Width',\r\n            type: 'slider',\r\n            default: 600,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} .apb-wrapper{\r\n                    width: ${value}px;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_height', {\r\n            label: 'Popup Height',\r\n            type: 'slider',\r\n            default: 600,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function(wrapper, value) {\r\n                return `${wrapper} .apb-wrapper{\r\n                    height: ${value}px;\r\n                }`\r\n            }\r\n        })\r\n    \r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import Sidebar from \"./inc/sidebar\";\r\nimport GlobalControls from \"./inc/global-controls\";\r\nimport widgets from \"./widgets\";\r\nimport state from \"./inc/state\";\r\nimport cssom from \"./inc/cssom\";\r\n\r\n\r\nclass Customizer extends Sidebar {\r\n\r\n    constructor() {\r\n        super()\r\n        window.addEventListener('DOMContentLoaded', this.loadSavedMarkup.bind(this) );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create controls for sidebar\r\n     * @var GlobalControls returns the global controls settings\r\n     * \r\n     */ \r\n    createControls(type, uid) {\r\n        if( type === 'popup-settings' ) {\r\n            this.createControlMarkup( this.globalControls, 'global' )\r\n        } else {\r\n            this.createControlMarkup( widgets[type], uid )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create Widgets Markup for sidebar \r\n     * \r\n     */ \r\n    createWidget() {\r\n        this.createWidgetMarkup()\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * On saving content \r\n     * \r\n     */ \r\n    onSaveChanges() {\r\n\r\n        const btn = jQuery('.save-changes-btn');\r\n        btn.on( 'click', function() {\r\n            btn.addClass('is-loading');\r\n            const markup  = jQuery('.alpha-popup-builder').parent().html();\r\n            cssom.getCSS().then( css => {\r\n                jQuery.ajax({\r\n                    type: \"POST\",\r\n                    data: {\r\n                        action: 'save',\r\n                        css: JSON.stringify( css ),\r\n                        html: JSON.stringify( markup ),\r\n                        storage: JSON.stringify( state.get() )\r\n                    },\r\n                    url: 'http://localhost/popup-host/' + 'storage/index.php',\r\n                    success: function(){\r\n                        setTimeout(()=>{\r\n                            btn.removeClass('is-loading');\r\n                        },1000)\r\n                    }\r\n                });\r\n            })\r\n        })\r\n    }\r\n    \r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create widget markup \r\n     * this method is responsible for creating unique id for widget wrapper\r\n     * \r\n     */ \r\n    uid() {\r\n        let store = state.get();\r\n        const promise = new Promise((resolve, reject) => {\r\n            function generateUID() {\r\n                let uid = Math.floor((Math.random() * 10000) + 1);\r\n                if( Reflect.has( store, uid ) ) {\r\n                    generateUID();\r\n                } else {\r\n                    resolve(uid)\r\n                }\r\n            }\r\n            generateUID()\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    onDropWidget( widget ) {\r\n        this.uid().then( wrapperId => {\r\n            \r\n            /**\r\n             * \r\n             * \r\n             * @var name widget name\r\n             * @var id widget id\r\n             * @render function for creating markup \r\n             * \r\n             */ \r\n            const { name, id, render } = widget.widgetAttribute;\r\n            state.add(wrapperId, {})\r\n            const data = state.get()[wrapperId];\r\n\r\n            // generate markup \r\n            if( typeof render === 'function' ) {\r\n                const markup = render( wrapperId );\r\n                jQuery('.alpha-popup-builder .apb-wrapper').append(markup)\r\n                jQuery('.popup-widget-element').draggable({ containment: 'parent' })\r\n                jQuery('.panel--info').text(name);\r\n                \r\n                // generate style from default values\r\n                Object.entries( widget ).map(([prop, attr]) => {\r\n                    if( prop !== 'widgetAttribute' && attr.selector ) {\r\n                        // use default value\r\n                        data[prop] = attr.default;\r\n                        // generate css\r\n                        const initialStyle = attr.selector( '.apb-' + wrapperId, data[prop] );\r\n                        if( initialStyle ) {\r\n                            const { selector, style } = cssom.seperateStyle( initialStyle );\r\n                            cssom.insert(selector, style)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }) // end of promise\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Drop widget \r\n     * \r\n     */ \r\n    dropWidget( self ) {\r\n        //make widget panel element dragable\r\n        jQuery('.popup-widget').draggable({\r\n            helper: 'clone'\r\n        })\r\n\r\n        // make preview panel widget draggable\r\n        const container = jQuery(document).find(\".alpha-popup-builder\");\r\n        container.droppable({\r\n            accept: '.popup-widget', \r\n            drop: function( event, ui ) {\r\n                const type = ui.draggable.data('type');\r\n                self.onDropWidget( widgets[type] )\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Remove Widget \r\n     * \r\n     */ \r\n    removeWidget( ) {\r\n        jQuery(document).on('click', '.remove-btn', function(ev){\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n            const element = jQuery(this).parent();\r\n            const uid = element.data('uid')\r\n            const widgetId = element.attr('id');\r\n            const widget = widgets[widgetId]\r\n            const selector = new Set();\r\n            state.remove( uid )\r\n            Object.entries( widget ).map(([prop, attr]) => {\r\n                if( prop !== 'widgetAttribute' && attr.selector ) {\r\n                    const initialStyle = attr.selector( '.apb-' + uid, '' );\r\n                    if( initialStyle ) {\r\n                        selector.add( cssom.seperateStyle( initialStyle ).selector );\r\n                    }\r\n                }\r\n            })\r\n            cssom.delete( Array.from(selector) );\r\n            element.remove();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Load Saved markup \r\n     * \r\n     */ \r\n    loadSavedMarkup() {\r\n\r\n        const self = this;\r\n        fetch( 'http://localhost/popup-host/' + 'storage/index.php?all')\r\n        .then( response => response.json())\r\n        .then( response => {\r\n            \r\n            const { html, storage } = response.body;\r\n\r\n            if( storage ) {\r\n                state.set( JSON.parse( storage ) )\r\n            }\r\n\r\n            if( html ) {\r\n                // load the markup into the dom\r\n                jQuery('.alpha-popup-builder').parent().html(JSON.parse(html));\r\n                // restore saved css \r\n                jQuery('.popup-widget-element').each( (i, item) =>{\r\n                    const wrapperId     = item.dataset.uid;\r\n                    const widgetConfig  = widgets[item.id]\r\n                    const data          = state.get()[wrapperId];\r\n\r\n                     // generate style from default values\r\n                    Object.entries( widgetConfig ).map(([prop, attr]) => {\r\n                        if( prop !== 'widgetAttribute' && attr.selector ) {\r\n                            \r\n                            if( !Reflect.has( data, prop ) ) {\r\n                                data[prop] =  attr.default;\r\n                            }\r\n\r\n                            const initialStyle = attr.selector( '.apb-' + wrapperId, data[prop] );\r\n                            if( initialStyle ) {\r\n                                const { selector, style } = cssom.seperateStyle( initialStyle );\r\n                                cssom.insert(selector, style)\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n                \r\n                // enable drag and drop \r\n                self.dropWidget( self );\r\n                jQuery('.popup-widget-element').draggable({ containment: 'parent' })\r\n            }\r\n\r\n            /**\r\n             * \r\n             * After loading the entire saved markup and style load the drag and drop functionility\r\n             * \r\n             */ \r\n            self.init.call( self );\r\n            \r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Initalize customizer script\r\n     * \r\n     */ \r\n    init() {\r\n\r\n        const self = this;\r\n        self.globalControls = new GlobalControls();\r\n        self.sidebarInit();\r\n        self.createControls('popup-settings');\r\n        self.createWidget();\r\n        self.onSaveChanges();\r\n        self.dropWidget( self );\r\n        self.removeWidget( self );\r\n\r\n        // change sidebar markup based on what settings user want \r\n        jQuery(document).on('click', '.aside-btn, .popup-widget-element', function(ev) {\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n            \r\n            const type = this.dataset.type;\r\n            // toggle the active class\r\n            if( ['popup-settings', 'widget-settings'].includes(type) ) {\r\n                jQuery('.aside-btn').removeClass('active');\r\n                this.classList.add('active');\r\n            }\r\n\r\n            switch( type ) {\r\n                case 'popup-settings': // when popup settings button clicked\r\n                self.createControls.call(self, type);\r\n                jQuery('.panel--info').text('Popup Settings');\r\n                break;\r\n                \r\n                case 'widget-settings': // when all widgets button clicked\r\n                jQuery('.panel--info').text('Widgets List');\r\n                self.createWidget.call(self, type);\r\n                break;\r\n                \r\n                case 'widget': // when individual widget is clicked\r\n                jQuery('.aside-btn').removeClass('active');\r\n                self.createControls.call(self, this.id, this.dataset.uid);\r\n                break;\r\n            }\r\n\r\n            // update scrollbar \r\n            self.sidebarSettings.ps.update()\r\n            self.dropWidget( self );\r\n            self.removeWidget( self );\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\nnew Customizer();","import ControlBase from \"./base\";\r\nimport state from \"./state\";\r\nimport widgets from \"../widgets\";\r\nimport cssom from './cssom';\r\n\r\nexport default class Sidebar {\r\n    \r\n    sidebarSettings = {\r\n        wheelSpeed: 2,\r\n        wheelPropagation: true,\r\n        minScrollbarLength: 20\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * attach perfect scrollbar plugin into sidebar \r\n     */ \r\n    sidebarInit() {\r\n        const ps  = new PerfectScrollbar('.aside__container', this.sidebarSettings );\r\n        this.sidebarSettings.ps = ps;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create markup for controls \r\n     * @param config refers to the controls of the widget\r\n     * @param uid refers to unique key. This unique get is generated when any widget is droped\r\n     * \r\n     */ \r\n    createControlMarkup( config, uid ) {\r\n\r\n        const storage = state.get();\r\n        const data = storage[uid];\r\n        const wrapper = '.apb-' + uid;\r\n\r\n        // generate control markup\r\n        const componentMarkup = Object.keys(config).map( key => {\r\n            const attr = config[key];\r\n            const component = ControlBase[attr.type]\r\n            let value = '';\r\n            \r\n            if( !component ) {\r\n                return '';\r\n            }\r\n\r\n\r\n            // use already saved values\r\n            if( !Reflect.has( data, key ) ) {\r\n                data[key] = attr.default;\r\n                value = data[key];\r\n            } else {\r\n                value = data[key];\r\n            }\r\n\r\n            // generate css\r\n            const initialStyle = attr.selector( wrapper, value );\r\n            if( initialStyle ) {\r\n                const { selector, style } = cssom.seperateStyle( initialStyle );\r\n                cssom.insert(selector, style)\r\n            }\r\n\r\n            return `\r\n                <div class=\"control-item\" data-inline=\"${attr.isLabelInline}\">\r\n                    <label> ${ attr.label } </label>\r\n                    <div class=\"control-item--field field-type-${attr.type}\">\r\n                        ${component({...attr, default: value}, key)}\r\n                    </div>\r\n                </div>\r\n            `\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.aside__container').html( `\r\n            <div class=\"control-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n\r\n        /**\r\n         * \r\n         * \r\n         * on input change\r\n         * This event is responsible to chapter the changes of any control input changes \r\n         * \r\n         */ \r\n        jQuery('.popup-control--trigger').on('input', function(ev) {\r\n            \r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n\r\n            const value = this.value;\r\n            const key   = this.dataset.key\r\n\r\n            data[key] = value;\r\n            const createStyle = config[key].selector( wrapper, data[key] );\r\n\r\n            if( createStyle ) {\r\n                const { selector, style } = cssom.seperateStyle( createStyle );\r\n                cssom.insert(selector, style)\r\n\r\n            }\r\n            \r\n            //update range slider value\r\n            if( this.type === 'range' ) {\r\n                this.nextElementSibling.innerText = value + 'px'\r\n            }\r\n\r\n        })\r\n        \r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create widget markup \r\n     * \r\n     */ \r\n    createWidgetMarkup( ) {\r\n\r\n        const componentMarkup = Object.keys( widgets ).map( key => {\r\n            const { widgetAttribute } = widgets[key];\r\n            return `\r\n            <div class=\"popup-element\" id=\"${widgetAttribute.id}\">\r\n                <div class=\"popup-widget\" draggable=\"true\" data-type=\"${key}\">\r\n                    <span class=\"material-icons-outlined\">${widgetAttribute.icon}</span>\r\n                    <label>${widgetAttribute.name}</label>\r\n                </div>\r\n            </div>`\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.aside__container').html( `\r\n            <div class=\"widget-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n    }\r\n\r\n\r\n}"],"names":["ControlBase","config","constructor","self","this","setWidgetAttribute","widgetAttribute","render","bind","registerControls","apply","addControl","id","props","isLabelInline","key","default","Object","keys","options","map","item","join","max","step","STORAGE","global","get","set","value","add","property","remove","text_widget","super","icon","name","label","type","selector","wrapper","scope","jQuery","length","find","text","wrapper_id","text_content","star_widget","rule","styleSheetId","fetchStylesheet","seperateStyle","initialStyle","split","trim","replace","style","getCSS","Promise","resolve","reject","css","document","getElementById","innerText","delete","selectors","insert","newStyle","index","sheet","rules","isImportant","includes","setProperty","cssText","insertRule","cssDeclaration","str","pop","mergeRule","i","prevStyle","nextRule","nextStyle","reverse","selectorText","Reflect","has","deleteRule","GlobalControls","sidebarSettings","wheelSpeed","wheelPropagation","minScrollbarLength","sidebarInit","ps","PerfectScrollbar","createControlMarkup","uid","data","componentMarkup","attr","component","html","on","ev","preventDefault","stopPropagation","dataset","createStyle","nextElementSibling","createWidgetMarkup","window","addEventListener","loadSavedMarkup","createControls","globalControls","createWidget","onSaveChanges","btn","addClass","markup","parent","then","ajax","action","JSON","stringify","storage","url","success","setTimeout","removeClass","store","generateUID","Math","floor","random","onDropWidget","widget","wrapperId","append","draggable","containment","entries","prop","dropWidget","helper","droppable","accept","drop","event","ui","removeWidget","element","widgetId","Set","Array","from","fetch","response","json","body","parse","each","widgetConfig","init","call","classList","update"],"sourceRoot":""}
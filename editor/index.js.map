{"version":3,"file":"index.js","mappings":"mBAAe,SAASA,IACpB,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,UCOZ,MAAMC,EACjBC,OAAS,GACTC,IAAM,GACNN,IAAMA,IAQNO,YAAaC,GAAW,GACpB,MAAMC,EAAOC,KACbA,KAAKC,iBAAiBC,MAAM,CAExBC,WAAY,SAAUC,EAAIC,GAElBA,EAAMC,WAGFD,EAAME,OADNT,EACe,oBAEA,mBAAmBC,EAAKT,OAG3CS,EAAKH,KAAOS,EAAME,OAASF,EAAMC,SAASE,KAAKH,GAAS,QAG5DA,EAAMI,cAAgBJ,EAAMI,gBAAiB,EAC7CV,EAAKJ,OAAOS,GAAMC,KAY9B,YAAaA,EAAOK,GAChB,MAAO,mCAEUL,EAAMM,uCACJD,mGAavB,aAAcL,EAAOK,GACjB,MAAO,mCAEUL,EAAMM,uCACJD,oGAavB,cAAeL,EAAOK,GAClB,MAAO,0IAIgBA,+FAGLL,EAAMO,mCACLP,EAAMQ,oCACLR,EAAMM,kFAEIN,EAAMM,sDC1F5C,MAOA,EAPgB,CACZG,YAAa,ICLF,cAAyBpB,EAIpCG,cAEI,OADAkB,QACO,CACHC,SAAUhB,KAAKL,OACfC,IAAKI,KAAKJ,IACVN,IAAKU,KAAKV,IACV2B,MAAO,cACPC,KAAM,gBACNC,KAAM,cACNC,OAAQpB,KAAKoB,OAAOC,KAAMrB,KAAKL,SAIvCM,mBACID,KAAKG,WAAW,aAAc,CAC1BmB,MAAO,aACPC,KAAM,QACNZ,QAAS,UACTF,eAAe,EACfH,SAAU,WACN,MAAO,sCACMN,KAAKW,iCAO9BS,OAAO9B,EAAM,IACT,MAAO,0DACwCA,gBAAkBA,6FAE7CU,KAAKwB,WAAWb,yED9BxCc,YAAa,IELF,cAAyB/B,EAEpCG,cAEI,OADAkB,QACO,CACHC,SAAUhB,KAAKL,OACfC,IAAKI,KAAKJ,IACVN,IAAKA,IACL2B,MAAO,cACPC,KAAM,gBACNC,KAAM,eAIdlB,mBAEID,KAAKG,WAAW,aAAc,CAC1BmB,MAAO,aACPC,KAAM,QACNZ,QAAS,UACTF,eAAe,EACfH,SAAU,WACN,MAAO,0DACMN,KAAKW,mCFjB9Be,aAAc,IGLH,cAA0BhC,EAErCG,cAEI,OADAkB,QACO,CACHC,SAAUhB,KAAKL,OACfC,IAAKI,KAAKJ,IACVN,IAAKA,IACL2B,MAAO,eACPC,KAAM,gBACNC,KAAM,gBAIdlB,mBAEID,KAAKG,WAAW,cAAe,CAC3BmB,MAAO,aACPC,KAAM,QACNZ,QAAS,UACTF,eAAe,EACfH,SAAU,WACN,MAAO,0DACMN,KAAKW,mCHjB9BgB,cAAe,IINJ,cAA2BjC,EAEtCG,cAEI,OADAkB,QACO,CACHC,SAAUhB,KAAKL,OACfC,IAAKI,KAAKJ,IACVN,IAAKA,IACL2B,MAAO,gBACPC,KAAM,gBACNC,KAAM,iBAIdlB,mBAEID,KAAKG,WAAW,cAAe,CAC3BmB,MAAO,aACPC,KAAM,QACNZ,QAAS,UACTF,eAAe,EACfH,SAAU,WACN,MAAO,0DACMN,KAAKW,oCCxBnB,MAAMiB,UAAuBlC,EAExCG,cAEI,OADAkB,OAAM,GACC,CACHC,SAAUhB,KAAKL,OACfC,IAAKI,KAAKJ,IACVN,IAAK,EACL2B,MAAO,oBAKfhB,mBAEID,KAAKG,WAAW,kBAAmB,CAC/BmB,MAAO,yBACPC,KAAM,QACNZ,QAAS,UACTF,eAAe,EACfH,SAAU,WACN,MAAO,oDACiBN,KAAKW,2EACmBX,KAAKW,iCAK7DX,KAAKG,WAAW,4BAA6B,CACzCmB,MAAO,qBACPC,KAAM,QACNZ,QAAS,UACTF,eAAe,EACfH,SAAU,WACN,MAAO,gDACaN,KAAKW,2EAMjCX,KAAKG,WAAW,4BAA6B,CACzCmB,MAAO,qBACPC,KAAM,SACNZ,QAAS,EACTC,IAAK,GACLC,KAAK,EACLP,SAAU,WACN,MAAO,iDACaN,KAAKW,mDACHX,KAAKW,mCAKnCX,KAAKG,WAAW,sBAAuB,CACnCmB,MAAO,eACPC,KAAM,SACNZ,QAAS,IACTC,IAAK,IACLC,KAAK,GACLP,SAAU,WACN,MAAO,kDACcN,KAAKW,kCAKlCX,KAAKG,WAAW,qBAAsB,CAClCmB,MAAO,cACPC,KAAM,SACNZ,QAAS,IACTC,IAAK,IACLC,KAAK,GACLP,SAAU,WACN,MAAO,0CACMN,KAAKW,kCAK1BX,KAAKG,WAAW,sBAAuB,CACnCmB,MAAO,eACPC,KAAM,SACNZ,QAAS,IACTC,IAAK,IACLC,KAAK,GACLP,SAAU,WACN,MAAO,2CACON,KAAKW,mCCqDnC,IA3IA,cCFe,MACXkB,gBAAkB,CACdC,WAAY,EACZC,kBAAkB,EAClBC,mBAAoB,IAQxBC,cACI,MAAMC,EAAM,IAAIC,iBAAiB,gCAAiCnC,KAAK6B,iBACvE7B,KAAK6B,gBAAgBK,GAAKA,EAQ9BE,oBAAqBzC,EAAQ0C,GACzB,MAAM,SAAErB,GAAarB,EAIf2C,EAAkBC,OAAOC,KAAKxB,GAAUyB,KAAK/B,IAC/C,MAAMgC,EAAO1B,EAASN,GAChBiC,EAAYjD,EAAYgD,EAAKnB,MAEnC,OAAKoB,EAIE,4DACsCD,EAAKjC,gDAC/BiC,EAAKpB,kFAC6BoB,EAAKnB,mCAC5CoB,EAAUD,EAAMhC,uEAPnB,MAcfkC,OAAO,sBAAsBC,KAAM,kEAEzBP,EAAgBQ,KAAK,qCAW/BF,OAAO,2BAA2BG,GAAG,SAAS,SAASC,GAEnDA,EAAGC,iBACHD,EAAGE,kBAEH,MAAMC,EAAQnD,KAAKmD,MACbzC,EAAMV,KAAKoD,QAAQ1C,IACzB,IAAId,EAAM,GAGVoB,EAASN,GAAKC,QAAUwC,EACxBZ,OAAOc,OAAQrC,GAAWsC,SAASC,IAC3BA,EAAQjD,WACRV,GAAO2D,EAAQhD,OAASgD,EAAQjD,SAASE,KAAK+C,GAAW,WAK7DvC,EAASN,GAAKJ,UACfsC,OAAO,IAAIP,KAAa1C,EAAOL,OAAOkE,KAAK5D,GAI5B,UAAdI,KAAKuB,OACLvB,KAAKyD,mBAAmBC,UAAYP,EAAQ,SAaxDQ,qBAEI,MAAMrB,EAAkBC,OAAOC,KAAM,GAAUC,KAAK/B,IAChD,MAAMgC,EAAO,EAAQhC,GACrB,MAAO,oHAEqDA,sCACxCgC,EAAKxB,0CACRwB,EAAKvB,8DAM1ByB,OAAO,sBAAsBC,KAAM,iEAEzBP,EAAgBQ,KAAK,uCD7GnCc,aAAe,GACf/D,cACIkB,QACA8C,OAAOC,iBAAiB,mBAAoB9D,KAAK+D,KAAK1C,KAAKrB,OAU/DgE,eAAezC,GACX,MAAM0C,EAAoB,oBAAT1C,EAA6BvB,KAAKkE,eAAiB,EAAQ3C,GAC5EvB,KAAKoC,oBAAqB6B,EAAU1C,GAUxC4C,eACInE,KAAK2D,qBASTS,mBAAoBhE,EAAK,oBAAqBN,GAAW,EAAMF,EAAM,IAE7DE,EACA8C,OAAO,QAAQyB,OAAO,cAAcjE,MAASJ,KAAKkE,eAAetE,IAAM,YAGvEgD,OAAO,QAAQyB,OAAO,cAAcjE,MAASR,EAAM,YAS3D0E,aAAcC,GACV,MAAMC,EAAOlF,IACP0B,EAAWuD,EAAOvD,SAGxB,GAFAuD,EAAOjF,IAAMkF,EAETD,EAAOnD,OAAS,CAChB,MAAMqD,EAASF,EAAOnD,OAAOoD,GAC7B,IAAI5E,EAAM,GACVgD,OAAO,0BAA0ByB,OAAOI,GACxC7B,OAAO,yBAAyB8B,UAAU,CAAEC,YAAa,WAEzDpC,OAAOc,OAAQrC,GAAWsC,SAASC,IAC3BA,EAAQjD,WACRiD,EAAQhD,OAAS,mBAAmBiE,KACpC5E,GAAO2D,EAAQhD,OAASgD,EAAQjD,SAASE,KAAK+C,GAAW,WAGjEvD,KAAKoE,mBAAoB,GAAGG,EAAOtD,SAASsD,EAAOjF,OAAO,EAAOM,IAWzEgF,WAAY7E,GAER6C,OAAO,iBAAiB8B,UAAU,CAC9BG,OAAQ,UAIZjC,OAAQ,0BAA2BkC,UAAU,CACzCC,OAAQ,gBACRC,KAAM,SAAUC,EAAOC,GACnB,MAAM3D,EAAO2D,EAAGR,UAAUS,KAAK,QAC/BpF,EAAKuE,aAAc,EAAQ/C,OAWvCwC,OAEI,MAAMhE,EAAOC,KACbD,EAAKmE,eAAiB,IAAItC,EAC1B7B,EAAKkC,cACLlC,EAAKoE,eACLpE,EAAKqE,qBACLrE,EAAK6E,WAAY7E,GAGjB6C,OAAOwC,UAAUrC,GAAG,QAAS,sDAAsD,SAASC,GACxFA,EAAGC,iBACHD,EAAGE,kBAEH,MAAM3B,EAAOvB,KAAKoD,QAAQ7B,KAC1B,OAAQA,GACJ,IAAK,kBACLxB,EAAKiE,eAAexD,KAAKT,EAAMwB,GAC/B,MAEA,IAAK,cACLxB,EAAKoE,aAAa3D,KAAKT,EAAMwB,GAC7B,MAEA,IAAK,SACLxB,EAAKiE,eAAexD,KAAKT,EAAMC,KAAKI,IAKxCL,EAAK8B,gBAAgBK,GAAGmD,SACxBtF,EAAK6E,WAAY7E,S","sources":["webpack://popup-host/./src/inc/uid.js","webpack://popup-host/./src/inc/base.js","webpack://popup-host/./src/widgets/index.js","webpack://popup-host/./src/widgets/text-widget.js","webpack://popup-host/./src/widgets/star-widget.js","webpack://popup-host/./src/widgets/field-widget.js","webpack://popup-host/./src/widgets/button-widget.js","webpack://popup-host/./src/inc/global-controls.js","webpack://popup-host/./src/customizer.js","webpack://popup-host/./src/inc/sidebar.js"],"sourcesContent":["export default function uid() {\r\n    return Math.floor(Math.random() * 1000000 )\r\n}","import uid from \"./uid\";\r\n/**\r\n * \r\n * \r\n * @class ControlBase\r\n * @description ths class is responsible to simplify control creation\r\n * \r\n */ \r\nexport default class ControlBase {\r\n    config = {}\r\n    css = ''\r\n    uid = uid()\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Merge controls\r\n     * \r\n    */\r\n    constructor( isGlobal = false ) {\r\n        const self = this;\r\n        this.registerControls.apply({\r\n\r\n            addControl: function( id, props ) {\r\n                \r\n                if( props.selector ) {\r\n\r\n                    if( isGlobal ) {\r\n                        props.prefix = `#popup.element-1 `;\r\n                    } else {\r\n                        props.prefix = `#popup .element-${self.uid} `;\r\n                    }\r\n\r\n                    self.css += props.prefix + props.selector.call(props) + '\\n\\n';\r\n                }\r\n\r\n                props.isLabelInline = props.isLabelInline || false;\r\n                self.config[id] = props;\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static text( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"text\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static color( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"color\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * slider control \r\n     * \r\n     */ \r\n    static slider( props, key ) {\r\n        return (\r\n            `<div class=\"slider-control\">\r\n                <input\r\n                    class=\"popup-control--trigger\"\r\n                    data-key=${key}\r\n                    type=\"range\"\r\n                    min=\"0\"  \r\n                    max=${props.max}  \r\n                    step=${props.step} \r\n                    value=${props.default}               \r\n                >\r\n                <span class=\"value\">${props.default}px</span>\r\n            </div>\r\n            `\r\n        )\r\n    }\r\n}","import TextWidget from \"./text-widget\";\r\nimport StarWidget from \"./star-widget\";\r\nimport FieldWidget from \"./field-widget\";\r\nimport ButtonWidget from \"./button-widget\";\r\n\r\nconst widgets = {\r\n    text_widget: new TextWidget(),\r\n    star_widget: new StarWidget(),\r\n    field_widget: new FieldWidget(),\r\n    button_widget: new ButtonWidget(),\r\n}\r\n\r\nexport default widgets;","import ControlBase from \"../inc/base\";\r\nexport default class TextWidget extends ControlBase {\r\n\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: this.uid,\r\n            sheet: 'text_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Text Widget',\r\n            render: this.render.bind( this.config )\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        this.addControl('text_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `span {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    }\r\n    \r\n\r\n    render(uid = '') {\r\n        return `\r\n            <div class=\"popup-widget-element element-${uid}\" data-uid=\"${uid}\" id=\"text_widget\" data-type=\"widget\">\r\n                <div>\r\n                    <span>${this.text_color.default}</span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\nimport uid from \"../inc/uid\";\r\nexport default class StarWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: uid(),\r\n            sheet: 'star_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Star Widget',\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('star_color', {\r\n            label: 'Star Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper .text-widget p {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\nimport uid from \"../inc/uid\";\r\n\r\nexport default class FieldWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: uid(),\r\n            sheet: 'field_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Field Widget',\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('field_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper .text-widget p {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    \r\n    }\r\n    \r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\nimport uid from \"../inc/uid\";\r\n\r\nexport default class ButtonWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: uid(),\r\n            sheet: 'button_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Button Widget',\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('field_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper .text-widget p {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    \r\n    }\r\n    \r\n\r\n}\r\n\r\n","import ControlBase from \"./base\";\r\n\r\nexport default class GlobalControls extends ControlBase {\r\n\r\n    constructor() {\r\n        super(true);\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: 1,\r\n            sheet: 'popup-stylesheet'\r\n        }\r\n    }\r\n\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('global_popup_bg', {\r\n            label: 'Popup Background Color',\r\n            type: 'color',\r\n            default: '#e07a5f',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `.wrapper{\r\n                    background-color: ${this.default};\r\n                    box-shadow: 0px 0px 0 var(--border-width) ${this.default};\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_border_color', {\r\n            label: 'Popup Border Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `.wrapper{\r\n                    border-color: ${this.default};\r\n                    border-style: solid;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_border_width', {\r\n            label: 'Popup Border Width',\r\n            type: 'slider',\r\n            default: 5,\r\n            max: 50,\r\n            step:1,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-width: ${this.default}px;\r\n                    --border-width: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_radius', {\r\n            label: 'Popup Radius',\r\n            type: 'slider',\r\n            default: 500,\r\n            max: 500,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-radius: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_width', {\r\n            label: 'Popup Width',\r\n            type: 'slider',\r\n            default: 400,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    width: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_height', {\r\n            label: 'Popup Height',\r\n            type: 'slider',\r\n            default: 400,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    height: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n    \r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import Sidebar from \"./inc/sidebar\";\r\nimport GlobalControls from \"./inc/global-controls\";\r\nimport widgets from \"./widgets\";\r\nimport uid from \"./inc/uid\";\r\n\r\nclass Customizer extends Sidebar {\r\n    popupWrapper = '';\r\n    constructor() {\r\n        super()\r\n        window.addEventListener('DOMContentLoaded', this.init.bind(this) );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create controls for sidebar\r\n     * @class GlobalControls returns the global controls settings\r\n     * \r\n     */ \r\n    createControls(type) {\r\n        const settings = type === 'global-settings' ? this.globalControls : widgets[type];\r\n        this.createControlMarkup( settings, type )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create Widgets Markup for sidebar \r\n     * \r\n     */ \r\n\r\n    createWidget() {\r\n        this.createWidgetMarkup()\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * Generate stylesheet \r\n     * \r\n     */ \r\n    generateStyleSheet( id = 'global-settings-1', isGlobal = true, css = '' ) {\r\n        // generate global stylesheet\r\n        if( isGlobal ) {\r\n            jQuery('head').append(`<style id=\"${id}\">` + this.globalControls.css + '</style>');\r\n        }\r\n        else {\r\n            jQuery('head').append(`<style id=\"${id}\">` + css + '</style>');\r\n        }\r\n    }\r\n    /**\r\n     * \r\n     * \r\n     * Create widget markup \r\n     * \r\n     */ \r\n    onDropWidget( widget ) {\r\n        const _uid = uid();\r\n        const controls = widget.controls;\r\n        widget.uid = _uid;\r\n\r\n        if( widget.render ) {\r\n            const markup = widget.render(_uid);\r\n            let css = ''; \r\n            jQuery('#popup form > .wrapper').append(markup)\r\n            jQuery('.popup-widget-element').draggable({ containment: 'parent' })\r\n\r\n            Object.values( controls ).forEach( control => {\r\n                if( control.selector ) {\r\n                    control.prefix = `#popup .element-${_uid} `\r\n                    css += control.prefix + control.selector.call(control) + '\\n\\n';\r\n                }\r\n            })\r\n            this.generateStyleSheet( `${widget.sheet}-${widget.uid}`, false, css )\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Drop widget \r\n     * \r\n     */ \r\n    dropWidget( self ) {\r\n        // make widget panel element dragable\r\n        jQuery('.popup-widget').draggable({\r\n            helper: 'clone'\r\n        })\r\n\r\n        // make preview panel widget draggable\r\n        jQuery( \"#popup form > .wrapper\" ).droppable({\r\n            accept: '.popup-widget', \r\n            drop: function( event, ui ) {\r\n                const type = ui.draggable.data('type');\r\n                self.onDropWidget( widgets[type] )\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Initalize customizer script\r\n     * \r\n     */ \r\n    init() {\r\n\r\n        const self = this;\r\n        self.globalControls = new GlobalControls();\r\n        self.sidebarInit();\r\n        self.createWidget();\r\n        self.generateStyleSheet();\r\n        self.dropWidget( self );\r\n\r\n        // change sidebar markup based on what settings user want \r\n        jQuery(document).on('click', '.page-settings, .all-widget, .popup-widget-element', function(ev) {\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n            \r\n            const type = this.dataset.type;\r\n            switch( type ) {\r\n                case 'global-settings': // when global settings button clicked\r\n                self.createControls.call(self, type);\r\n                break;\r\n                \r\n                case 'all-widgets': // when all widgets button clicked\r\n                self.createWidget.call(self, type);\r\n                break;\r\n                \r\n                case 'widget': // when individual widget is clicked\r\n                self.createControls.call(self, this.id);\r\n                break;\r\n            }\r\n\r\n            // update scrollbar \r\n            self.sidebarSettings.ps.update()\r\n            self.dropWidget( self );\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\nnew Customizer();","import ControlBase from \"./base\";\r\nimport widgets from \"../widgets\";\r\n\r\nexport default class Sidebar {\r\n    sidebarSettings = {\r\n        wheelSpeed: 2,\r\n        wheelPropagation: true,\r\n        minScrollbarLength: 20\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * attach perfect scrollbar plugin into sidebar \r\n     */ \r\n    sidebarInit() {\r\n        const ps  = new PerfectScrollbar('.customizer__sidebar--content', this.sidebarSettings );\r\n        this.sidebarSettings.ps = ps;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create markup for controls \r\n     * \r\n     */ \r\n    createControlMarkup( config, sheetName ) {\r\n        const { controls } = config;\r\n\r\n\r\n        // generate control markup\r\n        const componentMarkup = Object.keys(controls).map( key => {\r\n            const attr = controls[key];\r\n            const component = ControlBase[attr.type]\r\n            \r\n            if( !component ) {\r\n                return '';\r\n            }\r\n\r\n            return `\r\n                <div class=\"control-item\" data-inline=\"${attr.isLabelInline}\">\r\n                    <label> ${ attr.label } </label>\r\n                    <div class=\"control-item--field field-type-${attr.type}\">\r\n                        ${component(attr, key)}\r\n                    </div>\r\n                </div>\r\n            `\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.sidebar-container').html( `\r\n            <div class=\"control-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n\r\n        /**\r\n         * \r\n         * \r\n         * on input change\r\n         * This event is responsible to chapter the changes of any control input changes \r\n         * \r\n         */ \r\n        jQuery('.popup-control--trigger').on('input', function(ev) {\r\n            \r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n\r\n            const value = this.value;\r\n            const key = this.dataset.key\r\n            let css = ''; \r\n\r\n            // generate style for popup\r\n            controls[key].default = value;\r\n            Object.values( controls ).forEach( control => {\r\n                if( control.selector ) {\r\n                    css += control.prefix + control.selector.call(control) + '\\n\\n';\r\n                }\r\n            })\r\n\r\n            // change old stylesheet with new styles\r\n            if( controls[key].selector ) {\r\n               jQuery(`#${sheetName}-${config.uid}`).text(css)\r\n            }\r\n\r\n            //update range slider value\r\n            if( this.type === 'range' ) {\r\n                this.nextElementSibling.innerText = value + 'px'\r\n            }\r\n\r\n        })\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create widget markup \r\n     * \r\n     */ \r\n    createWidgetMarkup( ) {\r\n\r\n        const componentMarkup = Object.keys( widgets ).map( key => {\r\n            const attr = widgets[key];\r\n            return `\r\n            <div class=\"popup-element\">\r\n                <div class=\"popup-widget\" draggable=\"true\" data-type=\"${key}\">\r\n                    <i class=\"${attr.icon}\"></i>\r\n                    <label>${attr.name}</label>\r\n                </div>\r\n            </div>`\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.sidebar-container').html( `\r\n            <div class=\"widget-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n    }\r\n\r\n\r\n}"],"names":["uid","Math","floor","random","ControlBase","config","css","constructor","isGlobal","self","this","registerControls","apply","addControl","id","props","selector","prefix","call","isLabelInline","key","default","max","step","text_widget","super","controls","sheet","icon","name","render","bind","label","type","text_color","star_widget","field_widget","button_widget","GlobalControls","sidebarSettings","wheelSpeed","wheelPropagation","minScrollbarLength","sidebarInit","ps","PerfectScrollbar","createControlMarkup","sheetName","componentMarkup","Object","keys","map","attr","component","jQuery","html","join","on","ev","preventDefault","stopPropagation","value","dataset","values","forEach","control","text","nextElementSibling","innerText","createWidgetMarkup","popupWrapper","window","addEventListener","init","createControls","settings","globalControls","createWidget","generateStyleSheet","append","onDropWidget","widget","_uid","markup","draggable","containment","dropWidget","helper","droppable","accept","drop","event","ui","data","document","update"],"sourceRoot":""}
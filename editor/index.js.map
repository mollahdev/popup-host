{"version":3,"file":"index.js","mappings":"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","sources":["webpack://popup-host/./src/inc/uid.js","webpack://popup-host/./src/inc/base.js","webpack://popup-host/./src/widgets/index.js","webpack://popup-host/./src/widgets/text-widget.js","webpack://popup-host/./src/widgets/star-widget.js","webpack://popup-host/./src/widgets/field-widget.js","webpack://popup-host/./src/widgets/button-widget.js","webpack://popup-host/./src/inc/global-controls.js","webpack://popup-host/./src/customizer.js","webpack://popup-host/./src/inc/sidebar.js"],"sourcesContent":["export default function uid() {\r\n    return Math.floor(Math.random() * 1000000 )\r\n}","import uid from \"./uid\";\r\n/**\r\n * \r\n * \r\n * @class ControlBase\r\n * @description ths class is responsible to simplify control creation\r\n * \r\n */ \r\nexport default class ControlBase {\r\n    config = {}\r\n    css = ''\r\n    uid = uid()\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Merge controls\r\n     * \r\n    */\r\n    constructor( isGlobal = false ) {\r\n        const self = this;\r\n        this.registerControls.apply({\r\n\r\n            addControl: function( id, props ) {\r\n                \r\n                if( props.selector ) {\r\n\r\n                    if( isGlobal ) {\r\n                        props.prefix = `#popup.element-1 `;\r\n                    } else {\r\n                        props.prefix = `#popup .element-${self.uid} `;\r\n                    }\r\n\r\n                    if( props.selector.call(props) ) {\r\n                        self.css += props.prefix + props.selector.call(props) + '\\n\\n';\r\n                    }\r\n                }\r\n\r\n                props.isLabelInline = props.isLabelInline || false;\r\n                self.config[id] = props;\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * select control \r\n     * \r\n     */ \r\n    static select( props, key ) {\r\n\r\n        return (\r\n            `<select value=\"${props.default}\" data-key=${key} type=\"select\" class=\"popup-control--trigger\">\r\n                ${\r\n                    (()=>{\r\n                        const options = Object.keys(props.options).map( item =>{\r\n                            return `<option value=\"${item}\">${props.options[item]}</option>`\r\n                        })\r\n                        return options.join('');\r\n                    })()\r\n                }\r\n            </select>\r\n            `\r\n        )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static text( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"text\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static color( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"color\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * slider control \r\n     * \r\n     */ \r\n    static slider( props, key ) {\r\n        return (\r\n            `<div class=\"slider-control\">\r\n                <input\r\n                    class=\"popup-control--trigger\"\r\n                    data-key=${key}\r\n                    type=\"range\"\r\n                    min=\"0\"  \r\n                    max=${props.max}  \r\n                    step=${props.step} \r\n                    value=${props.default}               \r\n                >\r\n                <span class=\"value\">${props.default}px</span>\r\n            </div>\r\n            `\r\n        )\r\n    }\r\n}","import TextWidget from \"./text-widget\";\r\nimport StarWidget from \"./star-widget\";\r\nimport FieldWidget from \"./field-widget\";\r\nimport ButtonWidget from \"./button-widget\";\r\n\r\nconst widgets = {\r\n    text_widget: new TextWidget(),\r\n    star_widget: new StarWidget(),\r\n    field_widget: new FieldWidget(),\r\n    button_widget: new ButtonWidget(),\r\n}\r\n\r\nexport default widgets;","import ControlBase from \"../inc/base\";\r\nexport default class TextWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: this.uid,\r\n            sheet: 'text_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Text Widget',\r\n            render: this.render.bind( this.config )\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        this.addControl('text_content', {\r\n            label: 'Text Color',\r\n            type: 'text',\r\n            default: 'All the text and elements in this popup should be editable and dragable',\r\n            selector: function() {\r\n                const scope = jQuery(this.prefix)\r\n                if( scope.length ) {\r\n                    scope.find('span').text(this.default)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.addControl('text_alignment', {\r\n            label: 'Text Alignment',\r\n            type: 'select',\r\n            default: 'center',\r\n            options: {\r\n                left: 'Left',\r\n                center: 'Center',\r\n                right: 'Right'\r\n            },\r\n            selector: function() {\r\n                return `span {\r\n                    display: inline-block;\r\n                    text-align: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('text_font_weight', {\r\n            label: 'Text Alignment',\r\n            type: 'select',\r\n            default: 400,\r\n            options: {\r\n                400: 'Regular',\r\n                700: 'Medium',\r\n                900: 'Bold'\r\n            },\r\n            selector: function() {\r\n                return `span {\r\n                    font-weight: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('text_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `span {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('text_font_size', {\r\n            label: 'Text Font Size',\r\n            type: 'slider',\r\n            default: 24,\r\n            max: 100,\r\n            step:1,\r\n            selector: function() {\r\n                return `span {\r\n                    font-size: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('text_line_height', {\r\n            label: 'Text Line Height',\r\n            type: 'slider',\r\n            default: 24,\r\n            max: 100,\r\n            step:1,\r\n            selector: function() {\r\n                return `span {\r\n                    line-height: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n    }\r\n    \r\n\r\n    render(uid = '') {\r\n        return `\r\n            <div class=\"popup-widget-element element-${uid}\" data-uid=\"${uid}\" id=\"text_widget\" data-type=\"widget\">\r\n                <i class=\"remove-btn\">x</i>\r\n                <div>\r\n                    <span>${this.text_content.default}</span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\nimport uid from \"../inc/uid\";\r\nexport default class StarWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: uid(),\r\n            sheet: 'star_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Star Widget',\r\n            render: this.render.bind( this.config )\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('star_color', {\r\n            label: 'Star Color',\r\n            type: 'color',\r\n            default: '#c75943',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `span {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('star_size', {\r\n            label: 'Star Size',\r\n            type: 'slider',\r\n            default: 34,\r\n            max: 200,\r\n            step:1,\r\n            selector: function() {\r\n                return `span {\r\n                    display: inline-block;\r\n                    font-size: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n    }\r\n\r\n    render(uid = '') {\r\n        return `\r\n            <div class=\"popup-widget-element element-${uid}\" data-uid=\"${uid}\" id=\"star_widget\" data-type=\"widget\">\r\n                <i class=\"remove-btn\">x</i>\r\n                <div>\r\n                    <span class=\"popup-star\"></span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\nimport uid from \"../inc/uid\";\r\n\r\nexport default class FieldWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: uid(),\r\n            sheet: 'field_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Field Widget',\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('field_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper .text-widget p {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    \r\n    }\r\n    \r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\nimport uid from \"../inc/uid\";\r\n\r\nexport default class ButtonWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: uid(),\r\n            sheet: 'button_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Button Widget',\r\n            render: this.render.bind( this.config )\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('button_content', {\r\n            label: 'Button Label',\r\n            type: 'text',\r\n            default: 'SIGNUP NOW',\r\n            selector: function() {\r\n               \r\n            }\r\n        })\r\n\r\n        this.addControl('button_padding_font_size', {\r\n            label: 'Font Size',\r\n            type: 'slider',\r\n            default: 20,\r\n            max: 100,\r\n            step:1,\r\n            selector: function() {\r\n                return `.button{\r\n                    font-size: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('button_padding_x', {\r\n            label: 'Padding X',\r\n            type: 'slider',\r\n            default: 20,\r\n            max: 200,\r\n            step:1,\r\n            selector: function() {\r\n                return `.button{\r\n                    padding-left: ${this.default}px;\r\n                    padding-right: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('button_padding_y', {\r\n            label: 'Padding Y',\r\n            type: 'slider',\r\n            default: 20,\r\n            max: 200,\r\n            step:1,\r\n            selector: function() {\r\n                return `.button{\r\n                    padding-top: ${this.default}px;\r\n                    padding-bottom: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('button_radius', {\r\n            label: 'Border Radius',\r\n            type: 'slider',\r\n            default: 20,\r\n            max: 200,\r\n            step:1,\r\n            selector: function() {\r\n                return `.button{\r\n                    border-radius: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('button_color', {\r\n            label: 'Button Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `.button {\r\n                    display: inline-block;\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('button_color_hover', {\r\n            label: 'Button Hover Color',\r\n            type: 'color',\r\n            default: '#414142',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `.button:hover {\r\n                    display: inline-block;\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('button_bg_color', {\r\n            label: 'Background Color',\r\n            type: 'color',\r\n            default: '#414142',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `.button {\r\n                    background: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('button_bg_color_hover', {\r\n            label: 'Background Hover Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `.button:hover {\r\n                    background: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    }\r\n\r\n    render(uid = '') {\r\n        return `\r\n            <div class=\"popup-widget-element element-${uid}\" data-uid=\"${uid}\" id=\"button_widget\" data-type=\"widget\">\r\n                <i class=\"remove-btn\">x</i>\r\n                <div>\r\n                    <span class=\"button\">${this.button_content.default}</span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import ControlBase from \"./base\";\r\n\r\nexport default class GlobalControls extends ControlBase {\r\n\r\n    constructor() {\r\n        super(true);\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: 1,\r\n            sheet: 'popup-stylesheet'\r\n        }\r\n    }\r\n\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('global_popup_bg', {\r\n            label: 'Popup Background Color',\r\n            type: 'color',\r\n            default: '#e07a5f',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `.wrapper{\r\n                    background-color: ${this.default};\r\n                    box-shadow: 0px 0px 0 var(--border-width) ${this.default};\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_border_color', {\r\n            label: 'Popup Border Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return `.wrapper{\r\n                    border-color: ${this.default};\r\n                    border-style: solid;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_border_width', {\r\n            label: 'Popup Border Width',\r\n            type: 'slider',\r\n            default: 5,\r\n            max: 50,\r\n            step:1,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-width: ${this.default}px;\r\n                    --border-width: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_radius', {\r\n            label: 'Popup Radius',\r\n            type: 'slider',\r\n            default: 500,\r\n            max: 500,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-radius: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_width', {\r\n            label: 'Popup Width',\r\n            type: 'slider',\r\n            default: 600,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    width: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_height', {\r\n            label: 'Popup Height',\r\n            type: 'slider',\r\n            default: 600,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    height: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n    \r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import Sidebar from \"./inc/sidebar\";\r\nimport GlobalControls from \"./inc/global-controls\";\r\nimport widgets from \"./widgets\";\r\nimport uid from \"./inc/uid\";\r\n\r\nclass Customizer extends Sidebar {\r\n    popupWrapper = '';\r\n    constructor() {\r\n        super()\r\n        window.addEventListener('DOMContentLoaded', this.init.bind(this) );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create controls for sidebar\r\n     * @class GlobalControls returns the global controls settings\r\n     * \r\n     */ \r\n    createControls(type) {\r\n        const settings = type === 'global-settings' ? this.globalControls : widgets[type];\r\n        this.createControlMarkup( settings, type )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create Widgets Markup for sidebar \r\n     * \r\n     */ \r\n\r\n    createWidget() {\r\n        this.createWidgetMarkup()\r\n    }\r\n\r\n    /**\r\n     * \r\n     * on Save Changes \r\n     * \r\n     */ \r\n    getStyles() {\r\n        const promise = new Promise ((resolve, reject) => {\r\n            const container = jQuery('.popup-widget-element, #popup');\r\n            let css = '';\r\n            container.each( (index, item) => {\r\n                const _uid = item.dataset.uid\r\n                const styleSheet = _uid == '1' ? `#global-settings-1` : `#${item.id}-${_uid}`;\r\n                const newCSS = jQuery(styleSheet).text();\r\n                css += newCSS;\r\n            })\r\n            resolve(css);\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    onSaveChanges() {\r\n        const self = this;\r\n        const btn = jQuery('.save-changes-btn');\r\n        btn.on( 'click', function() {\r\n            btn.addClass('is-loading');\r\n            \r\n            const markup = jQuery('#popup').parent().html();\r\n            self.getStyles().then( response => {\r\n                const data = {\r\n                    css: response,\r\n                    html: markup,\r\n                    type: 'content'\r\n                }\r\n\r\n                jQuery.ajax({\r\n                    type: \"POST\",\r\n                    data: data,\r\n                    url: window.location.href + 'storage/index.php',\r\n                    success: function(data){\r\n                        btn.removeClass('is-loading');\r\n                    }\r\n                });\r\n            })\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * Generate stylesheet \r\n     * \r\n     */ \r\n    generateStyleSheet( id = 'global-settings-1', isGlobal = true, css = '' ) {\r\n        // generate global stylesheet\r\n        if( isGlobal ) {\r\n            jQuery('head').append(`<style id=\"${id}\">` + this.globalControls.css + '</style>');\r\n        }\r\n        else {\r\n            jQuery('head').append(`<style id=\"${id}\">` + css + '</style>');\r\n        }\r\n    }\r\n    /**\r\n     * \r\n     * \r\n     * Create widget markup \r\n     * \r\n     */ \r\n    onDropWidget( widget ) {\r\n        const _uid = uid();\r\n        const controls = widget.controls;\r\n        widget.uid = _uid;\r\n\r\n        if( widget.render ) {\r\n            const markup = widget.render(_uid);\r\n            let css = ''; \r\n            jQuery('#popup form > .wrapper').append(markup)\r\n            jQuery('.popup-widget-element').draggable({ containment: 'parent' })\r\n\r\n            Object.values( controls ).forEach( control => {\r\n                if( control.selector ) {\r\n                    control.prefix = `#popup .element-${_uid} `\r\n                    if( control.selector.call(control) ) {\r\n                        css += control.prefix + control.selector.call(control) + '\\n\\n';\r\n                    }\r\n                }\r\n            })\r\n            this.generateStyleSheet( `${widget.sheet}-${widget.uid}`, false, css )\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Drop widget \r\n     * \r\n     */ \r\n    dropWidget( self ) {\r\n        // make widget panel element dragable\r\n        jQuery('.popup-widget').draggable({\r\n            helper: 'clone'\r\n        })\r\n\r\n        // make preview panel widget draggable\r\n        jQuery( \"#popup form > .wrapper\" ).droppable({\r\n            accept: '.popup-widget', \r\n            drop: function( event, ui ) {\r\n                const type = ui.draggable.data('type');\r\n                self.onDropWidget( widgets[type] )\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Remove Widget \r\n     * \r\n     */ \r\n    removeWidget( self ) {\r\n        jQuery(document).on('click', '.remove-btn', function(ev){\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n\r\n            const widget = jQuery(this).parent();\r\n            const id = widget.attr('id');\r\n            const uid = widget.data('uid')\r\n            const stylesheet = id + '-' + uid;\r\n            jQuery(`#${stylesheet}`).remove();\r\n            widget.remove();\r\n        \r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Initalize customizer script\r\n     * \r\n     */ \r\n    init() {\r\n\r\n        const self = this;\r\n        self.globalControls = new GlobalControls();\r\n        self.sidebarInit();\r\n        self.createWidget();\r\n        self.onSaveChanges();\r\n        self.generateStyleSheet();\r\n        self.dropWidget( self );\r\n        self.removeWidget( self );\r\n\r\n        // change sidebar markup based on what settings user want \r\n        jQuery(document).on('click', '.page-settings, .all-widget, .popup-widget-element', function(ev) {\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n            \r\n            const type = this.dataset.type;\r\n            switch( type ) {\r\n                case 'global-settings': // when global settings button clicked\r\n                self.createControls.call(self, type);\r\n                break;\r\n                \r\n                case 'all-widgets': // when all widgets button clicked\r\n                self.createWidget.call(self, type);\r\n                break;\r\n                \r\n                case 'widget': // when individual widget is clicked\r\n                self.createControls.call(self, this.id);\r\n                break;\r\n            }\r\n\r\n            // update scrollbar \r\n            self.sidebarSettings.ps.update()\r\n            self.dropWidget( self );\r\n            self.removeWidget( self );\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\nnew Customizer();","import ControlBase from \"./base\";\r\nimport widgets from \"../widgets\";\r\n\r\nexport default class Sidebar {\r\n    sidebarSettings = {\r\n        wheelSpeed: 2,\r\n        wheelPropagation: true,\r\n        minScrollbarLength: 20\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * attach perfect scrollbar plugin into sidebar \r\n     */ \r\n    sidebarInit() {\r\n        const ps  = new PerfectScrollbar('.customizer__sidebar--content', this.sidebarSettings );\r\n        this.sidebarSettings.ps = ps;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create markup for controls \r\n     * \r\n     */ \r\n    createControlMarkup( config, sheetName ) {\r\n        const { controls } = config;\r\n\r\n\r\n        // generate control markup\r\n        const componentMarkup = Object.keys(controls).map( key => {\r\n            const attr = controls[key];\r\n            const component = ControlBase[attr.type]\r\n            \r\n            if( !component ) {\r\n                return '';\r\n            }\r\n\r\n            return `\r\n                <div class=\"control-item\" data-inline=\"${attr.isLabelInline}\">\r\n                    <label> ${ attr.label } </label>\r\n                    <div class=\"control-item--field field-type-${attr.type}\">\r\n                        ${component(attr, key)}\r\n                    </div>\r\n                </div>\r\n            `\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.sidebar-container').html( `\r\n            <div class=\"control-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n\r\n        /**\r\n         * \r\n         * \r\n         * on input change\r\n         * This event is responsible to chapter the changes of any control input changes \r\n         * \r\n         */ \r\n        jQuery('.popup-control--trigger').on('input', function(ev) {\r\n            \r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n\r\n            const value = this.value;\r\n            const key = this.dataset.key\r\n            let css = ''; \r\n\r\n            // generate style for popup\r\n            controls[key].default = value;\r\n            Object.values( controls ).forEach( control => {\r\n                if( control.selector ) {\r\n                    if( control.selector.call(control) ) {\r\n                        css += control.prefix + control.selector.call(control) + '\\n\\n';\r\n                    }\r\n                }\r\n            })\r\n\r\n            // change old stylesheet with new styles\r\n            if( controls[key].selector ) {\r\n               jQuery(`#${sheetName}-${config.uid}`).text(css)\r\n            }\r\n\r\n            //update range slider value\r\n            if( this.type === 'range' ) {\r\n                this.nextElementSibling.innerText = value + 'px'\r\n            }\r\n\r\n        })\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create widget markup \r\n     * \r\n     */ \r\n    createWidgetMarkup( ) {\r\n\r\n        const componentMarkup = Object.keys( widgets ).map( key => {\r\n            const attr = widgets[key];\r\n            return `\r\n            <div class=\"popup-element\">\r\n                <div class=\"popup-widget\" draggable=\"true\" data-type=\"${key}\">\r\n                    <i class=\"${attr.icon}\"></i>\r\n                    <label>${attr.name}</label>\r\n                </div>\r\n            </div>`\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.sidebar-container').html( `\r\n            <div class=\"widget-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n    }\r\n\r\n\r\n}"],"names":["uid","Math","floor","random","ControlBase","config","css","constructor","isGlobal","self","this","registerControls","apply","addControl","id","props","selector","prefix","call","isLabelInline","key","default","Object","keys","options","map","item","join","max","step","text_widget","super","controls","sheet","icon","name","render","bind","label","type","scope","jQuery","length","find","text","left","center","right","text_content","star_widget","field_widget","button_widget","button_content","GlobalControls","sidebarSettings","wheelSpeed","wheelPropagation","minScrollbarLength","sidebarInit","ps","PerfectScrollbar","createControlMarkup","sheetName","componentMarkup","attr","component","html","on","ev","preventDefault","stopPropagation","value","dataset","values","forEach","control","nextElementSibling","innerText","createWidgetMarkup","popupWrapper","window","addEventListener","init","createControls","settings","globalControls","createWidget","getStyles","Promise","resolve","reject","container","each","index","_uid","styleSheet","newCSS","onSaveChanges","btn","addClass","markup","parent","then","response","data","ajax","url","location","href","success","removeClass","generateStyleSheet","append","onDropWidget","widget","draggable","containment","dropWidget","helper","droppable","accept","drop","event","ui","removeWidget","document","remove","update"],"sourceRoot":""}
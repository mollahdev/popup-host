{"version":3,"file":"index.js","mappings":"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","sources":["webpack://popup-host/./src/inc/base.js","webpack://popup-host/./src/widgets/index.js","webpack://popup-host/./src/widgets/text-widget.js","webpack://popup-host/./src/widgets/star-widget.js","webpack://popup-host/./src/widgets/field-widget.js","webpack://popup-host/./src/widgets/button-widget.js","webpack://popup-host/./src/inc/global-controls.js","webpack://popup-host/./src/customizer.js","webpack://popup-host/./src/inc/sidebar.js"],"sourcesContent":["/**\r\n * \r\n * \r\n * @class ControlBase\r\n * @description ths class is responsible to simplify control creation\r\n * \r\n */ \r\nexport default class ControlBase {\r\n    config = {}\r\n    css = ''\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Merge controls\r\n     * \r\n    */\r\n    constructor() {\r\n        const self = this;\r\n        this.registerControls.apply({\r\n\r\n            addControl: function( id, props ) {\r\n                \r\n                if( props.selector ) {\r\n                    props.prefix = '#popup ';\r\n                    self.css += props.prefix + props.selector.call(props) + '\\n\\n';\r\n                }\r\n\r\n                props.isLabelInline = props.isLabelInline || false;\r\n                self.config[id] = props;\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    uid() {\r\n        return Math.floor(Math.random() * 1000000 )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static text( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"text\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static color( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"color\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * slider control \r\n     * \r\n     */ \r\n    static slider( props, key ) {\r\n        return (\r\n            `<div class=\"slider-control\">\r\n                <input\r\n                    class=\"popup-control--trigger\"\r\n                    data-key=${key}\r\n                    type=\"range\"\r\n                    min=\"0\"  \r\n                    max=${props.max}  \r\n                    step=${props.step} \r\n                    value=${props.default}               \r\n                >\r\n                <span class=\"value\">${props.default}px</span>\r\n            </div>\r\n            `\r\n        )\r\n    }\r\n}","import TextWidget from \"./text-widget\";\r\nimport StarWidget from \"./star-widget\";\r\nimport FieldWidget from \"./field-widget\";\r\nimport ButtonWidget from \"./button-widget\";\r\n\r\nconst widgets = {\r\n    text_widget: new TextWidget(),\r\n    star_widget: new StarWidget(),\r\n    field_widget: new FieldWidget(),\r\n    button_widget: new ButtonWidget(),\r\n}\r\n\r\nexport default widgets;","import ControlBase from \"../inc/base\";\r\n\r\nexport default class TextWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: this.uid(),\r\n            sheet: 'text_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Text Widget',\r\n            render: this.render.bind( this.config )\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        this.addControl('text_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper .text-widget p {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        return `\r\n            <div class=\"popup-widget-element\" id=\"text_widget\" data-type=\"widget\">\r\n                <div>\r\n                    <span>${this.text_color.default}</span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\n\r\nexport default class StarWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: this.uid(),\r\n            sheet: 'star_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Star Widget',\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('star_color', {\r\n            label: 'Star Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper .text-widget p {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\n\r\nexport default class FieldWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: this.uid(),\r\n            sheet: 'field_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Field Widget',\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('field_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper .text-widget p {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    \r\n    }\r\n    \r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\n\r\nexport default class ButtonWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            uid: this.uid(),\r\n            sheet: 'button_widget',\r\n            icon: 'popup-widgets',\r\n            name: 'Button Widget',\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('field_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper .text-widget p {\r\n                    color: ${this.default};\r\n                }`\r\n            }\r\n        })\r\n    \r\n    }\r\n    \r\n\r\n}\r\n\r\n","import ControlBase from \"./base\";\r\n\r\nexport default class GlobalControls extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return {\r\n            controls: this.config,\r\n            css: this.css,\r\n            sheet: 'popup-stylesheet'\r\n        }\r\n    }\r\n\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('global_popup_bg', {\r\n            label: 'Popup Background Color',\r\n            type: 'color',\r\n            default: '#e07a5f',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    background-color: ${this.default};\r\n                    box-shadow: 0px 0px 0 var(--border-width) ${this.default};\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_border_color', {\r\n            label: 'Popup Border Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-color: ${this.default};\r\n                    border-style: solid;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_border_width', {\r\n            label: 'Popup Border Width',\r\n            type: 'slider',\r\n            default: 5,\r\n            max: 50,\r\n            step:1,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-width: ${this.default}px;\r\n                    --border-width: ${this.default}px;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_radius', {\r\n            label: 'Popup Radius',\r\n            type: 'slider',\r\n            default: 500,\r\n            max: 500,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    border-radius: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_width', {\r\n            label: 'Popup Width',\r\n            type: 'slider',\r\n            default: 400,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    width: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_height', {\r\n            label: 'Popup Height',\r\n            type: 'slider',\r\n            default: 400,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function() {\r\n                return ` .wrapper{\r\n                    height: ${this.default}px\r\n                }`\r\n            }\r\n        })\r\n    \r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import Sidebar from \"./inc/sidebar\";\r\nimport GlobalControls from \"./inc/global-controls\";\r\nimport widgets from \"./widgets\";\r\n\r\nclass Customizer extends Sidebar {\r\n    popupWrapper = '';\r\n    constructor() {\r\n        super()\r\n        window.addEventListener('DOMContentLoaded', this.init.bind(this) );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create controls for sidebar\r\n     * @class GlobalControls returns the global controls settings\r\n     * \r\n     */ \r\n    createControls(type) {\r\n        const settings = type === 'global-settings' ? this.globalControls : widgets[type];\r\n        this.createControlMarkup( settings, type )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create Widgets Markup for sidebar \r\n     * \r\n     */ \r\n\r\n    createWidget() {\r\n        this.createWidgetMarkup()\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * Generate stylesheet \r\n     * \r\n     */ \r\n    generateStyleSheet() {\r\n        // generate global stylesheet\r\n        jQuery('head').append('<style id=\"global-settings\">' + this.globalControls.css + '</style>');\r\n    }\r\n    /**\r\n     * \r\n     * \r\n     * Create widget markup \r\n     * \r\n     */ \r\n    onDropWidget( widget ) {\r\n        if( widget.render ) {\r\n            const markup = widget.render();\r\n            jQuery('#popup form > .wrapper').append(markup)\r\n            jQuery('.popup-widget-element').draggable({ containment: 'parent' })\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Drop widget \r\n     * \r\n     */ \r\n    dropWidget( self ) {\r\n        jQuery('.popup-widget').draggable({\r\n            helper: 'clone'\r\n        })\r\n    \r\n        jQuery( \"#popup form > .wrapper\" ).droppable({\r\n            accept: '.popup-widget', \r\n            drop: function( event, ui ) {\r\n              \r\n                const type = ui.draggable.data('type');\r\n                self.onDropWidget( widgets[type] )\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Initalize customizer script\r\n     * \r\n     */ \r\n    init() {\r\n        const self = this;\r\n        self.globalControls = new GlobalControls();\r\n        self.sidebarInit();\r\n        self.createWidget();\r\n        self.generateStyleSheet();\r\n        self.dropWidget( self );\r\n\r\n        // change sidebar markup based on what settings user want \r\n        jQuery(document).on('click', '.page-settings, .all-widget, .popup-widget-element', function() {\r\n\r\n            const type = this.dataset.type;\r\n\r\n            switch( type ) {\r\n                case 'global-settings':\r\n                self.createControls.call(self, type);\r\n                break;\r\n                \r\n                case 'all-widgets':\r\n                self.createWidget.call(self, type);\r\n                break;\r\n                \r\n                case 'widget':\r\n                self.createControls.call(self, this.id);\r\n                break;\r\n            }\r\n\r\n            // update scrollbar \r\n            self.sidebarSettings.ps.update()\r\n            self.dropWidget( self );\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\nnew Customizer();","import ControlBase from \"./base\";\r\nimport widgets from \"../widgets\";\r\n\r\nexport default class Sidebar {\r\n    sidebarSettings = {\r\n        wheelSpeed: 2,\r\n        wheelPropagation: true,\r\n        minScrollbarLength: 20\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * attach perfect scrollbar plugin into sidebar \r\n     */ \r\n    sidebarInit() {\r\n        const ps  = new PerfectScrollbar('.customizer__sidebar--content', this.sidebarSettings );\r\n        this.sidebarSettings.ps = ps;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create markup for controls \r\n     * \r\n     */ \r\n    createControlMarkup( config, sheetName ) {\r\n        const { controls } = config;\r\n\r\n        // generate control markup\r\n        const componentMarkup = Object.keys(controls).map( key => {\r\n            const attr = controls[key];\r\n            const component = ControlBase[attr.type]\r\n            \r\n            if( !component ) {\r\n                return '';\r\n            }\r\n\r\n            return `\r\n                <div class=\"control-item\" data-inline=\"${attr.isLabelInline}\">\r\n                    <label> ${ attr.label } </label>\r\n                    <div class=\"control-item--field field-type-${attr.type}\">\r\n                        ${component(attr, key)}\r\n                    </div>\r\n                </div>\r\n            `\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.sidebar-container').html( `\r\n            <div class=\"control-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n\r\n        /**\r\n         * \r\n         * \r\n         * on input change\r\n         * This event is responsible to chapter the changes of any control input changes \r\n         * \r\n         */ \r\n        jQuery('.sidebar-container').on('input', '.popup-control--trigger', function() {\r\n            \r\n            const value = this.value;\r\n            const key = this.dataset.key\r\n            let css = ''; \r\n\r\n            // generate style for popup\r\n            controls[key].default = value;\r\n            Object.values( controls ).forEach( control => {\r\n                if( control.selector ) {\r\n                    css += control.prefix + control.selector.call(control) + '\\n\\n';\r\n                }\r\n            })\r\n\r\n            // change old stylesheet with new styles\r\n            if( controls[key].selector ) {\r\n               jQuery(`#${sheetName}`).text(css)\r\n            }\r\n\r\n            //update range slider value\r\n            if( this.type === 'range' ) {\r\n                this.nextElementSibling.innerText = value + 'px'\r\n            }\r\n\r\n        })\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create widget markup \r\n     * \r\n     */ \r\n    createWidgetMarkup( ) {\r\n\r\n        const componentMarkup = Object.keys( widgets ).map( key => {\r\n            const attr = widgets[key];\r\n            return `\r\n            <div class=\"popup-element\">\r\n                <div class=\"popup-widget\" draggable=\"true\" data-type=\"${key}\">\r\n                    <i class=\"${attr.icon}\"></i>\r\n                    <label>${attr.name}</label>\r\n                </div>\r\n            </div>`\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.sidebar-container').html( `\r\n            <div class=\"widget-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n\r\n    }\r\n\r\n\r\n}"],"names":["ControlBase","config","css","constructor","self","this","registerControls","apply","addControl","id","props","selector","prefix","call","isLabelInline","uid","Math","floor","random","key","default","max","step","text_widget","super","controls","sheet","icon","name","render","bind","label","type","text_color","star_widget","field_widget","button_widget","GlobalControls","sidebarSettings","wheelSpeed","wheelPropagation","minScrollbarLength","sidebarInit","ps","PerfectScrollbar","createControlMarkup","sheetName","componentMarkup","Object","keys","map","attr","component","jQuery","html","join","on","value","dataset","values","forEach","control","text","nextElementSibling","innerText","createWidgetMarkup","popupWrapper","window","addEventListener","init","createControls","settings","globalControls","createWidget","generateStyleSheet","append","onDropWidget","widget","markup","draggable","containment","dropWidget","helper","droppable","accept","drop","event","ui","data","document","update"],"sourceRoot":""}
{"version":3,"file":"index.js","mappings":"mBAOe,MAAMA,EACjBC,OAAS,GAOTC,cACI,MAAMC,EAAOC,KAGTA,KAAKC,qBACLF,EAAKF,OAAOK,gBAAkBF,KAAKC,sBAInCD,KAAKG,SACLJ,EAAKF,OAAOK,gBAAgBC,OAASH,KAAKG,OAAOC,KAAKL,EAAKF,SAI/DG,KAAKK,iBAAiBC,MAAM,CACxBC,WAAY,SAAUC,EAAIC,GACtBA,EAAMC,cAAgBD,EAAMC,gBAAiB,EAC7CX,EAAKF,OAAOW,GAAMC,KAW9B,cAAeA,EAAOE,GAElB,MAAO,kBACeF,EAAMG,qBAAqBD,oEAGjBE,OAAOC,KAAKL,EAAMM,SAASC,KAAKC,GACrC,WAAWA,GAAQR,EAAMG,QAAU,WAAa,aAAaK,MAASR,EAAMM,QAAQE,gBAEhFC,KAAK,2CAcxC,YAAaT,EAAOE,GAChB,MAAO,mCAEUF,EAAMG,uCACJD,mGAavB,cAAeF,EAAOE,GAClB,MAAO,mCAEUF,EAAMG,uCACJD,qGAavB,aAAcF,EAAOE,GACjB,MAAO,mCAEUF,EAAMG,uCACJD,oGAavB,cAAeF,EAAOE,GAClB,MAAO,0IAIgBA,+FAGLF,EAAMU,mCACLV,EAAMW,oCACLX,EAAMG,kFAEIH,EAAMG,sDCzH5C,IAAIS,EAAU,CACVC,OAAQ,IAGZ,MAmBA,EAnBc,CACVC,IAAG,CAAEC,GAAS,IACNA,EACOH,EAAQG,GAERH,EAGfI,IAAKC,GACDL,EAAUK,GAEdC,IAAKC,EAAUF,GACXL,EAAQO,GAAYF,GAExBG,OAAQD,UACGP,EAAQO,KCbvB,EARgB,CACZE,YAAa,ICNF,cAAyBlC,EAEpCE,cAEI,OADAiC,QACO/B,KAAKH,OAGhBI,qBACI,MAAO,CACHO,GAAI,cACJwB,KAAM,QACNC,KAAM,eAId5B,mBACIL,KAAKO,WAAW,eAAgB,CAC5B2B,MAAO,aACPC,KAAM,OACNvB,QAAS,yCACTwB,SAAU,SAAUC,EAASX,GACzB,MAAMY,EAAQC,OAAOF,GACjBC,EAAME,QACNF,EAAMG,KAAK,QAAQC,KAAKhB,MAKpC1B,KAAKO,WAAW,mBAAoB,CAChC2B,MAAO,cACPC,KAAM,SACNvB,QAAS,IACTG,QAAS,CACL,IAAK,UACL,IAAK,SACL,IAAK,QAETqB,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,8CACSX,2BAK3B1B,KAAKO,WAAW,iBAAkB,CAC9B2B,MAAO,YACPC,KAAM,SACNvB,QAAS,SACTG,QAAS,CACL4B,KAAM,OACNC,OAAQ,SACRC,MAAO,SAEXT,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,6CACQX,2BAK1B1B,KAAKO,WAAW,aAAc,CAC1B2B,MAAO,aACPC,KAAM,QACNvB,QAAS,UACTF,eAAe,EACf0B,SAAU,SAASC,EAASX,GACxB,MAAO,GAAGW,wCACGX,2BAKrB1B,KAAKO,WAAW,iBAAkB,CAC9B2B,MAAO,iBACPC,KAAM,SACNvB,QAAS,GACTO,IAAK,IACLC,KAAK,EACLgB,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,4CACOX,6BAMzB1B,KAAKO,WAAW,aAAc,CAC1B2B,MAAO,QACPC,KAAM,SACNvB,QAAS,IACTO,IAAK,IACLC,KAAK,EACLgB,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,wCACGX,yEAMrB1B,KAAKO,WAAW,SAAU,CACtB2B,MAAO,UACPC,KAAM,SACNvB,QAAS,EACTF,eAAe,EACf0B,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,qCACKX,2BAM3BvB,OAAQ2C,GACJ,MAAO,sDACoCA,gBAAyBA,0IAGhD9C,KAAK+C,aAAanC,yED/G1CoC,YAAa,IEPF,cAAyBpD,EAEpCE,cAEI,OADAiC,QACO/B,KAAKH,OAGhBI,qBACI,MAAO,CACHO,GAAI,cACJwB,KAAM,OACNC,KAAM,QAId5B,mBAEIL,KAAKO,WAAW,aAAc,CAC1B2B,MAAO,aACPC,KAAM,QACNvB,QAAS,UACTF,eAAe,EACf0B,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,wCACGX,2BAKrB1B,KAAKO,WAAW,YAAa,CACzB2B,MAAO,YACPC,KAAM,SACNvB,QAAS,GACTO,IAAK,IACLC,KAAK,EACLgB,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,4CACOX,kEAMzB1B,KAAKO,WAAW,SAAU,CACtB2B,MAAO,UACPC,KAAM,SACNvB,QAAS,EACTF,eAAe,EACf0B,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,qCACKX,2BAM3BvB,OAAQ2C,GACJ,MAAO,sDACoCA,gBAAyBA,8OC4H5E,EADc,IA1Kb,MAEGG,KAAO,GACPnD,YAAaU,GACTR,KAAKkD,aAAe1C,EACpBR,KAAKmD,kBASTC,cAAeC,GAIX,MAAO,CACHjB,SAJaiB,EAAaC,MAAM,KAAK,GAAGC,OAAOC,QAAQ,UAAW,KAIxDC,MAHAJ,EAAaC,MAAM,KAAK,GAAGC,OAAOC,QAAQ,oBAAqB,IAAIA,QAAQ,UAAW,MAaxGE,SAaI,OAZgB,IAAIC,SAAQ,CAACC,EAASC,KAClC,IAAIC,EAAM,GACV,IAAK,IAAI1B,KAAYpC,KAAKiD,KAEtBa,GAAO,GAAG1B,MADIpC,KAAKiD,KAAKb,GAAUqB,SAItCM,SAASC,eAAehE,KAAKkD,cAAce,UAAYH,EACvD9D,KAAKiD,KAAO,GACZjD,KAAKmD,kBACLS,EAAQE,MAUhBI,OAAQC,GACJ,IAAK,IAAI/B,KAAY+B,EACjB/B,EAAWA,EAASmB,cACbvD,KAAKiD,KAAKb,GAczBgC,OAAQhC,EAAUiC,GAId,GAHAjC,EAAWA,EAASmB,OAGhBvD,KAAKiD,KAAKb,GAAY,CACtB,MAAMkC,EAAQtE,KAAKiD,KAAKb,GAAUkC,MAC5Bb,EAAQzD,KAAKuE,MAAMC,MAAMvD,KAAKqD,GAAOb,MAE3CY,EAASf,MAAM,KAAKtC,KAAKC,IACrB,IAAIW,EAAWX,EAAKqC,MAAM,KAAK,GAC3B5B,EAAQT,EAAKqC,MAAM,KAAK,GAC5B,GAAI1B,GAAYF,EAAQ,CAEpB,MAAM+C,EAAc/C,EAAMgD,SAAS,aAAe,YAAc,GAC5C,cAAhBD,IACA/C,EAAQA,EAAM4B,MAAM,KAAK,IAG7BG,EAAMkB,YAAY/C,EAAS2B,OAAQ7B,EAAM6B,OAAQkB,GACjDzE,KAAKiD,KAAKb,GAAUqB,MAAQA,EAAMmB,iBAK1C5E,KAAKiD,KAAKb,GAAY,CAClBkC,MAAOtE,KAAKwC,OACZiB,MAAOY,GAEXrE,KAAKuE,MAAMM,WAAW,GAAGzC,MAAaiC,KAAarE,KAAKwC,QACxDxC,KAAKwC,OAASxC,KAAKuE,MAAMC,MAAMhC,OAQvCsC,eAAgBC,EAAK3C,GAEjB,OADoB2C,EAAIzB,MAAMlB,GAAU4C,MAAMxB,QAAQ,oBAAqB,IACxDD,OAQvB0B,UAAWV,EAAOnC,EAAU8C,GACxB,MAAMC,EAAYnF,KAAKiD,KAAKb,GAAUqB,MAChC2B,EAAYb,EAAMC,MAAMvD,KAAKiE,GACnC,IAAIG,EAAcrF,KAAK8E,eAAgBM,EAASR,QAASxC,GACzDpC,KAAKiD,KAAKb,GAAUqB,MAAQ4B,EAAYF,EAS5ChC,kBAEI,MAAMoB,EAAQR,SAASC,eAAehE,KAAKkD,cAAcqB,MACnDC,EAAQD,EAAMC,MACd1D,EAAQD,OAAOC,KAAK0D,GAAOc,UAEjC,IAAK,IAAIJ,KAAKpE,EAAO,CACjB,MAAMmC,EAAOuB,EAAMU,GACnB,GAAoB,iBAATjC,EAAoB,CAC3B,MAAMb,EAAWa,EAAKsC,aAClBC,QAAQC,IAAIzF,KAAKiD,KAAMb,IACvBpC,KAAKiD,KAAKb,GAAUkC,MAAQY,EAC5BlF,KAAKiF,UAAWV,EAAOnC,EAAU8C,GACjCX,EAAMmB,WAAWR,IAGjBlF,KAAKiD,KAAKb,GAAY,CAClBkC,MAAQY,EACRzB,MAAQzD,KAAK8E,eAAe7B,EAAK2B,QAASxC,KAS1D,IAAI8C,EAAI,EACR,IAAK,IAAI9C,KAAYpC,KAAKiD,KAAO,CAC7BjD,KAAKiD,KAAKb,GAAUkC,MAAQY,EAC5B,MAAMzB,EAAQzD,KAAKiD,KAAKb,GAAUqB,MAClCc,EAAMmB,WAAWR,GACjBX,EAAMM,WAAW,GAAGzC,MAAaqB,KAAUyB,GAC3CA,IAIJlF,KAAKuE,MAAQA,EACbvE,KAAKwC,OAAQ+B,EAAMC,MAAMhC,SAKG,eCrLrB,MAAMmD,UAAuB/F,EAExCE,cAEI,OADAiC,QACO/B,KAAKH,OAGhBI,qBACI,MAAO,CACHO,GAAI,SACJwB,KAAM,QACNC,KAAM,kBAId5B,mBAEIL,KAAKO,WAAW,kBAAmB,CAC/B2B,MAAO,yBACPC,KAAM,QACNvB,QAAS,UACTF,eAAe,EACf0B,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,2DACcX,2BAMhC1B,KAAKO,WAAW,sBAAuB,CACnC2B,MAAO,eACPC,KAAM,SACNvB,QAAS,IACTO,IAAK,IACLC,KAAK,GACLgB,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,iGAEWX,6BAK7B1B,KAAKO,WAAW,qBAAsB,CAClC2B,MAAO,cACPC,KAAM,SACNvB,QAAS,IACTO,IAAK,IACLC,KAAK,GACLgB,SAAU,SAAUC,EAASX,GACzB,MAAO,GAAGW,+CACGX,6BAKrB1B,KAAKO,WAAW,sBAAuB,CACnC2B,MAAO,eACPC,KAAM,SACNvB,QAAS,IACTO,IAAK,IACLC,KAAK,GACLgB,SAAU,SAASC,EAASX,GACxB,MAAO,GAAGW,gDACIX,8BC/Df,MAAMkE,EAOjB,aACI,IAAIC,EAAQ,QAaZ,OAZgB,IAAIlC,SAAQ,CAACC,EAASC,MAClC,SAASiC,IACL,IAAIC,EAAMC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAoB,GAE3CV,QAAQC,IAAKI,EAAOE,GACpBD,IAEAlC,EAAQmC,GAGhBD,MAYR,oBAAqBK,EAAQJ,GACzB,MAAMK,EAAO,MAAUL,GACtBlF,OAAOwF,QAASF,GAASnF,KAAI,EAAEsF,EAAMC,MAClC,GAAa,oBAATD,GAA8BC,EAAKnE,SAAW,CAEzCoD,QAAQC,IAAKW,EAAME,KACpBF,EAAKE,GAASC,EAAK3F,SAGvB,MAAMyC,EAAekD,EAAKnE,SAAU,QAAU2D,EAAKK,EAAKE,IACxD,GAAIjD,EAAe,CACf,MAAM,SAAEjB,EAAQ,MAAEqB,GAAU,gBAAqBJ,GACjD,SAAajB,EAAUqB,QAevC,qBAAsB0C,EAAQJ,GAC1B,MAAM3D,EAAW,IAAIoE,IACrB,SAAcT,GACdlF,OAAOwF,QAASF,GAASnF,KAAI,EAAEsF,EAAMC,MACjC,GAAa,oBAATD,GAA8BC,EAAKnE,SAAW,CAC9C,MAAMiB,EAAekD,EAAKnE,SAAU,QAAU2D,EAAK,IAC/C1C,GACAjB,EAAST,IAAK,gBAAqB0B,GAAejB,cAK9D,SAAcqE,MAAMC,KAAKtE,KCyKjC,IA1OA,cCHe,MAEXuE,gBAAkB,CACdC,WAAY,EACZC,kBAAkB,EAClBC,mBAAoB,IAQxBC,cACI,MAAMC,EAAM,IAAIC,iBAAiB,oBAAqBjH,KAAK2G,iBAC3D3G,KAAK2G,gBAAgBK,GAAKA,EAU9BE,oBAAqBrH,EAAQkG,GAEzB,MACMK,EADU,QACKL,GACf1D,EAAU,QAAU0D,EAGpBoB,EAAkBtG,OAAOC,KAAKjB,GAAQmB,KAAKL,IAC7C,MAAM4F,EAAO1G,EAAOc,GACdyG,EAAYxH,EAAY2G,EAAKpE,MACnC,IAAIT,EAAQ,GAEZ,IAAK0F,EACD,MAAO,GAKN5B,QAAQC,IAAKW,EAAMzF,KACpByF,EAAKzF,GAAO4F,EAAK3F,SAGjBc,EAAQ0E,EAAKzF,GAIjB,MAAM0C,EAAekD,EAAKnE,SAAUC,EAASX,GAC7C,GAAI2B,EAAe,CACf,MAAM,SAAEjB,EAAQ,MAAEqB,GAAU,gBAAqBJ,GACjD,SAAajB,EAAUqB,GAG3B,MAAO,4DACsC8C,EAAK7F,gDAC/B6F,EAAKrE,kFAC6BqE,EAAKpE,mCAC5CiF,EAAU,IAAIb,EAAM3F,QAASc,GAAQf,0EAOvD4B,OAAO,qBAAqB8E,KAAM,kEAExBF,EAAgBjG,KAAK,qCAW/BqB,OAAO,2BAA2B+E,GAAG,SAAS,SAASC,GAEnDA,EAAGC,iBACHD,EAAGE,kBAEH,MAAM/F,EAAQ1B,KAAK0B,MACbf,EAAQX,KAAK0H,QAAQ/G,IAE3ByF,EAAKzF,GAAOe,EACZ,MAAMiG,EAAc9H,EAAOc,GAAKyB,SAAUC,EAAS+D,EAAKzF,IAExD,GAAIgH,EAAc,CACd,MAAM,SAAEvF,EAAQ,MAAEqB,GAAU,gBAAqBkE,GACjD,SAAavF,EAAUqB,GAIT,UAAdzD,KAAKmC,OACLnC,KAAK4H,mBAAmB3D,UAAYvC,EAAQ,SAYxDmG,qBAEI,MAAMV,EAAkBtG,OAAOC,KAAM,GAAUE,KAAKL,IAChD,MAAM,gBAAET,GAAoB,EAAQS,GACpC,MAAO,gDAC0BT,EAAgBM,+EACWG,kEACZT,EAAgB8B,2CAC/C9B,EAAgB+B,8DAMrCM,OAAO,qBAAqB8E,KAAM,iEAExBF,EAAgBjG,KAAK,uCD1HnCpB,cACIiC,QACA+F,OAAOC,iBAAiB,mBAAoB/H,KAAKgI,gBAAgB5H,KAAKJ,OAY1EiI,eAAe9F,EAAM4D,GACjB,GAAa,mBAAT5D,EACAnC,KAAKkH,oBAAqBlH,KAAKkI,eAAgB,cAC5C,CACH,MAAMC,EAAa,EAAQhG,GAAMjC,gBAAgB+B,KACjDM,OAAO,gBAAgBG,KAAMyF,GAC7BnI,KAAKkH,oBAAqB,EAAQ/E,GAAO4D,IAUjDqC,eACIpI,KAAK6H,qBASTQ,gBAEI,MAAMC,EAAM/F,OAAO,qBACnB+F,EAAIhB,GAAI,SAAS,WACbgB,EAAIC,SAAS,cACb,MAAMC,EAAUjG,OAAO,wBAAwBkG,SAASpB,OACxD,WAAeqB,MAAM5E,IACjBvB,OAAOoG,KAAK,CACRxG,KAAM,OACNiE,KAAM,CACFwC,OAAQ,OACR9E,IAAK+E,KAAKC,UAAWhF,GACrBuD,KAAMwB,KAAKC,UAAWN,GACtBO,QAASF,KAAKC,UAAW,UAE7BE,IAAK,gDACLC,QAAS,WACLC,YAAW,KACPZ,EAAIa,YAAY,gBAClB,cAOtBC,aAAcjD,EAAQkD,GAClBzD,EAAQG,MAAM2C,MAAMY,IAEhB,MAAM,KAAErH,EAAI,GAAEzB,EAAE,OAAEL,GAAWgG,EAAOjG,gBAIpC,GAHA,MAAUoJ,EAAW,IAGC,mBAAXnJ,EAAwB,CAC/B,MAAMqI,EAASrI,EAAQmJ,GACvB/G,OAAO,qCAAqCgH,OAAOf,GACnDjG,OAAO,QAAU+G,GAAWxF,IAAIuF,GAChC9G,OAAO,yBAAyBiH,UAAU,CAAEC,YAAa,WACzDlH,OAAO,gBAAgBG,KAAKT,GAC5B2D,EAAQ8D,aAAcvD,EAAQmD,OAa1CK,WAAY5J,GAERwC,OAAO,iBAAiBiH,UAAU,CAC9BI,OAAQ,UAIMrH,OAAOwB,UAAUtB,KAAK,wBAC9BoH,UAAU,CAChBC,OAAQ,gBACRC,KAAM,SAAUC,EAAOC,GACnB,MAAMxB,EAAYlG,OAAOvC,MAAMqJ,WACzBlH,EAAY8H,EAAGT,UAAUpD,KAAK,QAC9BiD,EAAY,CACd1G,KAAMsH,EAAGZ,SAAS1G,KAAO8F,EAAO9F,KAChCuH,IAAKD,EAAGZ,SAASa,IAAMzB,EAAOyB,KAGlCnK,EAAKqJ,aAAc,EAAQjH,GAAOkH,MAU9Cc,eACI5H,OAAOwB,UAAUuD,GAAG,QAAS,eAAe,SAASC,GACjDA,EAAGC,iBACHD,EAAGE,kBACH,MAAM2C,EAAY7H,OAAOvC,MAAMyI,SACzB1C,EAAYqE,EAAQhE,KAAK,OACzBiE,EAAYD,EAAQ7D,KAAK,MACzBJ,EAAY,EAAQkE,GAC1BzE,EAAQ0E,cAAcnE,EAAQJ,GAC9BqE,EAAQvI,YAUhBmG,kBAEI,MAAMjI,EAAOC,KACbuK,MAAO,qDACN7B,MAAM8B,GAAYA,EAASC,SAC3B/B,MAAM8B,IAEH,MAAM,KAAEnD,EAAI,QAAE0B,GAAYyB,EAASE,KAE/B3B,GACA,MAAWF,KAAK8B,MAAO5B,IAGvB1B,IAEA9E,OAAO,wBAAwBkG,SAASpB,KAAKwB,KAAK8B,MAAMtD,IAExD9E,OAAO,yBAAyBqI,MAAM,CAAC1F,EAAGjE,KACtC,MAAMqI,EAAgBrI,EAAKyG,QAAQ3B,IAC7B8E,EAAgB,EAAQ5J,EAAKT,IACnCoF,EAAQ8D,aAAcmB,EAAcvB,MAGxCvJ,EAAK4J,WAAY5J,GACjBwC,OAAO,yBAAyBiH,UAAU,CAAEC,YAAa,YAQ7D1J,EAAK+K,KAAKC,KAAMhL,MAWxB+K,OAEI,MAAM/K,EAAOC,KACbD,EAAKmI,eAAiB,IAAIvC,EAC1B5F,EAAKgH,cACLhH,EAAKkI,eAAe,kBACpBlI,EAAKqI,eACLrI,EAAKsI,gBACLtI,EAAK4J,WAAY5J,GACjBA,EAAKoK,aAAcpK,GAGnBwC,OAAOwB,UAAUuD,GAAG,QAAS,qCAAqC,SAASC,GACvEA,EAAGC,iBACHD,EAAGE,kBAEH,MAAMtF,EAAOnC,KAAK0H,QAAQvF,KAO1B,OALI,CAAC,iBAAkB,mBAAmBuC,SAASvC,KAC/CI,OAAO,cAAc4G,YAAY,UACjCnJ,KAAKgL,UAAUrJ,IAAI,WAGfQ,GACJ,IAAK,iBACLpC,EAAKkI,eAAe8C,KAAKhL,EAAMoC,GAC/BI,OAAO,gBAAgBG,KAAK,kBAC5B,MAEA,IAAK,kBACLH,OAAO,gBAAgBG,KAAK,gBAC5B3C,EAAKqI,aAAa2C,KAAKhL,EAAMoC,GAC7B,MAEA,IAAK,SACLI,OAAO,cAAc4G,YAAY,UACjCpJ,EAAKkI,eAAe8C,KAAKhL,EAAMC,KAAKQ,GAAIR,KAAK0H,QAAQ3B,KAKzDhG,EAAK4G,gBAAgBK,GAAGiE,SACxBlL,EAAK4J,WAAY5J,GACjBA,EAAKoK,aAAcpK,S","sources":["webpack://popup-host/./src/inc/base.js","webpack://popup-host/./src/inc/state.js","webpack://popup-host/./src/widgets/index.js","webpack://popup-host/./src/widgets/text-widget.js","webpack://popup-host/./src/widgets/star-widget.js","webpack://popup-host/./src/inc/cssom.js","webpack://popup-host/./src/inc/global-controls.js","webpack://popup-host/./src/inc/utility.js","webpack://popup-host/./src/customizer.js","webpack://popup-host/./src/inc/sidebar.js"],"sourcesContent":["/**\r\n * \r\n * \r\n * @class ControlBase\r\n * @description ths class is responsible to simplify control creation\r\n * \r\n */ \r\nexport default class ControlBase {\r\n    config = {}\r\n    /**\r\n     * \r\n     * \r\n     * Merge controls\r\n     * \r\n    */\r\n    constructor() {\r\n        const self = this;\r\n\r\n        // collect widget attribute\r\n        if( this.setWidgetAttribute ) {\r\n            self.config.widgetAttribute = this.setWidgetAttribute();\r\n        }\r\n\r\n        // bind controls with render method\r\n        if( this.render ) {\r\n            self.config.widgetAttribute.render = this.render.bind(self.config);\r\n        }\r\n\r\n        // register the controls with widget\r\n        this.registerControls.apply({\r\n            addControl: function( id, props ) {\r\n                props.isLabelInline = props.isLabelInline || false;\r\n                self.config[id] = props;\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * select control \r\n     * \r\n     */ \r\n    static select( props, key ) {\r\n\r\n        return (\r\n            `<select value=\"${props.default}\" data-key=${key} type=\"select\" class=\"popup-control--trigger\">\r\n                ${\r\n                    (()=>{\r\n                        const options = Object.keys(props.options).map( item =>{\r\n                            return `<option ${item == props.default ? 'selected' : ''} value=\"${item}\">${props.options[item]}</option>`\r\n                        })\r\n                        return options.join('');\r\n                    })()\r\n                }\r\n            </select>\r\n            `\r\n        )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * text control \r\n     * \r\n     */ \r\n    static text( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"text\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * number control \r\n     * \r\n     */ \r\n    static number( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"number\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * color control \r\n     * \r\n     */ \r\n    static color( props, key ) {\r\n        return (\r\n            `<input \r\n                value=\"${props.default}\" \r\n                data-key=${key} \r\n                type=\"color\" \r\n                class=\"popup-control--trigger\"\r\n            />`\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * slider control \r\n     * \r\n     */ \r\n    static slider( props, key ) {\r\n        return (\r\n            `<div class=\"slider-control\">\r\n                <input\r\n                    class=\"popup-control--trigger\"\r\n                    data-key=${key}\r\n                    type=\"range\"\r\n                    min=\"0\"  \r\n                    max=${props.max}  \r\n                    step=${props.step} \r\n                    value=${props.default}               \r\n                >\r\n                <span class=\"value\">${props.default}px</span>\r\n            </div>\r\n            `\r\n        )\r\n    }\r\n}","/**\r\n * \r\n * @file state\r\n * this state object is responsible for managing unique uid and widget settings through out the application \r\n * \r\n */ \r\n\r\n\r\nlet STORAGE = {\r\n    global: {}\r\n};\r\n\r\nconst state = {\r\n    get( target = false ) {\r\n        if( target ) {\r\n            return STORAGE[target]\r\n        } else {\r\n            return STORAGE\r\n        }\r\n    },\r\n    set( value ) {\r\n        STORAGE = value;\r\n    },\r\n    add( property, value ) {\r\n        STORAGE[property] = value;\r\n    }, \r\n    remove( property ) {\r\n        delete STORAGE[property]\r\n    } \r\n}\r\n\r\nexport default state\r\n","import TextWidget from \"./text-widget\";\r\nimport StarWidget from \"./star-widget\";\r\n// import FieldWidget from \"./field-widget\";\r\n// import ButtonWidget from \"./button-widget\";\r\n// import CloseButtonWidget from \"./close-button-widget\";\r\n\r\nconst widgets = {\r\n    text_widget: new TextWidget(),\r\n    star_widget: new StarWidget(),\r\n    // field_widget: new FieldWidget(),\r\n    // button_widget: new ButtonWidget(),\r\n    // close_button_widget: new CloseButtonWidget(),\r\n}\r\n\r\nexport default widgets;","import ControlBase from \"../inc/base\";\r\nexport default class TextWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return this.config;\r\n    }\r\n\r\n    setWidgetAttribute() {\r\n        return {\r\n            id: 'text_widget',\r\n            icon: 'title',\r\n            name: 'Text Widget'\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        this.addControl('text_content', {\r\n            label: 'Text Color',\r\n            type: 'text',\r\n            default: 'No credit card required. No Surprises ',\r\n            selector: function( wrapper, value ) {\r\n                const scope = jQuery(wrapper)\r\n                if( scope.length ) {\r\n                    scope.find('span').text(value)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.addControl('text_font_weight', {\r\n            label: 'Font Weight',\r\n            type: 'select',\r\n            default: 400,\r\n            options: {\r\n                400: 'Regular',\r\n                700: 'Medium',\r\n                900: 'Bold'\r\n            },\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    font-weight: ${value};\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('text_alignment', {\r\n            label: 'Alignment',\r\n            type: 'select',\r\n            default: 'center',\r\n            options: {\r\n                left: 'Left',\r\n                center: 'Center',\r\n                right: 'Right'\r\n            },\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    text-align: ${value};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('text_color', {\r\n            label: 'Text Color',\r\n            type: 'color',\r\n            default: '#ffffff',\r\n            isLabelInline: true,\r\n            selector: function(wrapper, value) {\r\n                return `${wrapper} span {\r\n                    color: ${value};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('text_font_size', {\r\n            label: 'Text Font Size',\r\n            type: 'slider',\r\n            default: 18,\r\n            max: 100,\r\n            step:1,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    font-size: ${value}px;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        \r\n        this.addControl('text_width', {\r\n            label: 'Width',\r\n            type: 'slider',\r\n            default: 250,\r\n            max: 800,\r\n            step:1,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    width: ${value}px;\r\n                    display: inline-block;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('zindex', {\r\n            label: 'Z-Index',\r\n            type: 'number',\r\n            default: 1,\r\n            isLabelInline: true,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} {\r\n                    z-index: ${value};\r\n                }`\r\n            }\r\n        })\r\n    }\r\n    \r\n    render( wrapper_id ) {\r\n        return `\r\n            <div class=\"popup-widget-element apb-${wrapper_id}\" data-uid=\"${wrapper_id}\" id=\"text_widget\" data-type=\"widget\">\r\n                <i class=\"remove-btn\">x</i>\r\n                <div>\r\n                    <span>${this.text_content.default}</span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n\r\n}\r\n\r\n","import ControlBase from \"../inc/base\";\r\nexport default class StarWidget extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return this.config;\r\n    }\r\n\r\n    setWidgetAttribute() {\r\n        return {\r\n            id: 'star_widget',\r\n            icon: 'star',\r\n            name: 'Star'\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('star_color', {\r\n            label: 'Star Color',\r\n            type: 'color',\r\n            default: '#c75943',\r\n            isLabelInline: true,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    color: ${value};\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('star_size', {\r\n            label: 'Star Size',\r\n            type: 'slider',\r\n            default: 44,\r\n            max: 200,\r\n            step:1,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} span {\r\n                    font-size: ${value}px;\r\n                    display: unset;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('zindex', {\r\n            label: 'Z-Index',\r\n            type: 'number',\r\n            default: 1,\r\n            isLabelInline: true,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} {\r\n                    z-index: ${value};\r\n                }`\r\n            }\r\n        })\r\n    }\r\n\r\n    render( wrapper_id ) {\r\n        return `\r\n            <div class=\"popup-widget-element apb-${wrapper_id}\" data-uid=\"${wrapper_id}\" id=\"star_widget\" data-type=\"widget\">\r\n                <i class=\"remove-btn\">x</i>\r\n                <div>\r\n                    <span class=\"material-icons-outlined\">star</span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n    \r\n\r\n}\r\n\r\n","/**\r\n * \r\n * \r\n * @author Ashraf\r\n * @version 1.0.0\r\n * @last_update 15th January 2021\r\n * @email mollah.dev@gmail.com\r\n * @class StylesheetManager\r\n * @description this class is responsible for managing stylesheet. \r\n * It helps to keep unique selector and style by merging them together \r\n */ \r\n\r\n class StylesheetManager {\r\n    \r\n    rule = {};\r\n    constructor( id ) {\r\n        this.styleSheetId = id;\r\n        this.fetchStylesheet();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * get seperate selector and style \r\n     * \r\n     */ \r\n    seperateStyle( initialStyle ) {\r\n        const selector = initialStyle.split('{')[0].trim().replace(/\\s{2,}/g, ' ');\r\n        const style = initialStyle.split('{')[1].trim().replace(/[&\\/\\\\,$~.?<>{}]/g, '').replace(/\\s{2,}/g, ' ');\r\n\r\n        return {\r\n            selector, style\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * collect all the css and return as string\r\n     * \r\n     */ \r\n    getCSS() {\r\n        const promise = new Promise((resolve, reject) => {\r\n            let css = '';\r\n            for( let selector in this.rule ) {\r\n                const style = this.rule[selector].style;\r\n                css += `${selector} {${style}}`;\r\n            }\r\n\r\n            document.getElementById(this.styleSheetId).innerText = css;\r\n            this.rule = {};\r\n            this.fetchStylesheet();\r\n            resolve(css)\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param selectors this arguments contains multiple selector\r\n     * \r\n     */ \r\n    delete( selectors ) {\r\n        for( let selector of selectors ) {\r\n            selector = selector.trim();\r\n            delete this.rule[selector]\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * inert rules into the cssom\r\n     * if the selector already created, put the new new style into the existing rule otherwise create a new rule\r\n     * @param selector dom selector\r\n     * @param newStyle css properties and values\r\n     * \r\n     */\r\n\r\n    insert( selector, newStyle ) {\r\n        selector = selector.trim();\r\n\r\n        // check is the selector exists\r\n        if( this.rule[selector] ) {\r\n            const index = this.rule[selector].index;\r\n            const style = this.sheet.rules.item(index).style;\r\n\r\n            newStyle.split(';').map( item => {\r\n                let property = item.split(':')[0]\r\n                let value = item.split(':')[1]\r\n                if( property && value ) {\r\n                    \r\n                    const isImportant = value.includes('important') ? 'important' : '';\r\n                    if( isImportant === 'important' ) {\r\n                        value = value.split('!')[0];\r\n                    } \r\n                    \r\n                    style.setProperty(property.trim(), value.trim(), isImportant );\r\n                    this.rule[selector].style = style.cssText;\r\n                }\r\n            })\r\n\r\n        } else {\r\n            this.rule[selector] = {\r\n                index: this.length, \r\n                style: newStyle\r\n            }\r\n            this.sheet.insertRule(`${selector} {${newStyle}}`, this.length);\r\n            this.length = this.sheet.rules.length\r\n        }\r\n    } \r\n    /*\r\n     * \r\n     * \r\n     * Get css declaration\r\n     */ \r\n    cssDeclaration( str, selector ) {\r\n        const declaration = str.split(selector).pop().replace(/[&\\/\\\\,$~.?<>{}]/g, '')\r\n        return declaration.trim()\r\n    }\r\n    /**\r\n     * \r\n     * \r\n     * this method will run when stylesheet load first time\r\n     * \r\n     */ \r\n    mergeRule( sheet, selector, i ) {\r\n        const prevStyle = this.rule[selector].style;\r\n        const nextRule  = sheet.rules.item(i);\r\n        let nextStyle   = this.cssDeclaration( nextRule.cssText, selector );\r\n        this.rule[selector].style = nextStyle + prevStyle\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Get stylesheet from DOM\r\n     * \r\n     */ \r\n    fetchStylesheet() {\r\n\r\n        const sheet = document.getElementById(this.styleSheetId).sheet;\r\n        const rules = sheet.rules;\r\n        const keys  = Object.keys(rules).reverse();\r\n\r\n        for( let i of keys ) {\r\n            const rule = rules[i];\r\n            if( typeof rule === 'object' ) {\r\n                const selector = rule.selectorText\r\n                if( Reflect.has(this.rule, selector) ) {\r\n                    this.rule[selector].index = i;\r\n                    this.mergeRule( sheet, selector, i );\r\n                    sheet.deleteRule(i)\r\n                } \r\n                else {\r\n                    this.rule[selector] = {\r\n                        index : i,\r\n                        style : this.cssDeclaration(rule.cssText, selector)\r\n                    };\r\n                }  \r\n            }\r\n        }\r\n\r\n        // insert the merged css into the stylesheet\r\n        // Note : this code will execute when stylesheet load first time\r\n\r\n        let i = 0;\r\n        for( let selector in this.rule ) {\r\n            this.rule[selector].index = i;\r\n            const style = this.rule[selector].style;\r\n            sheet.deleteRule(i);\r\n            sheet.insertRule(`${selector} {${style}}`, i);\r\n            i++;\r\n        }\r\n        \r\n        // assigned the filtered and merged css rules into the class\r\n        this.sheet = sheet;\r\n        this.length= sheet.rules.length;\r\n    }\r\n}\r\n\r\n\r\nconst cssom = new StylesheetManager('builder-css');\r\nexport default cssom;","import ControlBase from \"./base\";\r\nexport default class GlobalControls extends ControlBase {\r\n\r\n    constructor() {\r\n        super();\r\n        return this.config;\r\n    }\r\n\r\n    setWidgetAttribute() {\r\n        return {\r\n            id: 'global',\r\n            icon: 'title',\r\n            name: 'Popup Settings'\r\n        }\r\n    }\r\n\r\n    registerControls() {\r\n        \r\n        this.addControl('global_popup_bg', {\r\n            label: 'Popup Background Color',\r\n            type: 'color',\r\n            default: '#e07a5f',\r\n            isLabelInline: true,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} .apb-wrapper {\r\n                    background-color: ${value};\r\n                }`\r\n            }\r\n        })\r\n        \r\n\r\n        this.addControl('global_popup_radius', {\r\n            label: 'Popup Radius',\r\n            type: 'slider',\r\n            default: 500,\r\n            max: 500,\r\n            step:10,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} .apb-wrapper {\r\n                    position: relative;\r\n                    border-radius: ${value}px;\r\n                }`\r\n            }\r\n        })\r\n\r\n        this.addControl('global_popup_width', {\r\n            label: 'Popup Width',\r\n            type: 'slider',\r\n            default: 600,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function( wrapper, value ) {\r\n                return `${wrapper} .apb-wrapper{\r\n                    width: ${value}px;\r\n                }`\r\n            }\r\n        })\r\n        \r\n        this.addControl('global_popup_height', {\r\n            label: 'Popup Height',\r\n            type: 'slider',\r\n            default: 600,\r\n            max: 1000,\r\n            step:10,\r\n            selector: function(wrapper, value) {\r\n                return `${wrapper} .apb-wrapper{\r\n                    height: ${value}px;\r\n                }`\r\n            }\r\n        })\r\n    \r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\n","import state from './state';\r\nimport cssom from './cssom';\r\n\r\nexport default class Utility {\r\n    /**\r\n     * \r\n     * \r\n     * this uid method is responsible for creating unique number for the widget wrapper \r\n     * \r\n     */ \r\n    static uid() {\r\n        let store = state.get();\r\n        const promise = new Promise((resolve, reject) => {\r\n            function generateUID() {\r\n                let uid = Math.floor((Math.random() * 10000) + 1);\r\n                // check weather the number already used\r\n                if( Reflect.has( store, uid ) ) {\r\n                    generateUID();\r\n                } else {\r\n                    resolve(uid)\r\n                }\r\n            }\r\n            generateUID()\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * this method is responsible for finding controls of a widget\r\n     * @param widget refers to the widget \r\n     * @param uid refers to the unique id / widget wrapper\r\n     */ \r\n    static applyControl( widget, uid ) {\r\n        const data = state.get(uid)\r\n         Object.entries( widget ).map(([prop, attr]) => {\r\n            if( prop !== 'widgetAttribute' && attr.selector ) {\r\n\r\n                if( !Reflect.has( data, prop ) ) {\r\n                    data[prop] =  attr.default;\r\n                }\r\n\r\n                const initialStyle = attr.selector( '.apb-' + uid, data[prop] );\r\n                if( initialStyle ) {\r\n                    const { selector, style } = cssom.seperateStyle( initialStyle );\r\n                    cssom.insert(selector, style)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * \r\n     * on remove widget \r\n     * @param widget refers to the widget \r\n     * @param uid refers to the unique id / widget wrapper\r\n     */ \r\n\r\n    static removeControl( widget, uid ) {\r\n        const selector = new Set();\r\n        state.remove( uid )\r\n        Object.entries( widget ).map(([prop, attr]) => {\r\n            if( prop !== 'widgetAttribute' && attr.selector ) {\r\n                const initialStyle = attr.selector( '.apb-' + uid, '' );\r\n                if( initialStyle ) {\r\n                    selector.add( cssom.seperateStyle( initialStyle ).selector );\r\n                }\r\n            }\r\n        })\r\n\r\n        cssom.delete( Array.from(selector) );\r\n    }\r\n\r\n}","import Sidebar from \"./inc/sidebar\";\r\nimport GlobalControls from \"./inc/global-controls\";\r\nimport widgets from \"./widgets\";\r\nimport state from \"./inc/state\";\r\nimport cssom from \"./inc/cssom\";\r\nimport Utility from \"./inc/utility\";\r\n\r\n\r\nclass Customizer extends Sidebar {\r\n\r\n    constructor() {\r\n        super()\r\n        window.addEventListener('DOMContentLoaded', this.loadSavedMarkup.bind(this) );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create controls for sidebar\r\n     * @var GlobalControls returns the global controls settings\r\n     * @param type refers to the settings type = popup settings or widget settings\r\n     * @param uid refers to the widget wrapper id\r\n     * \r\n     */ \r\n    createControls(type, uid) {\r\n        if( type === 'popup-settings' ) {\r\n            this.createControlMarkup( this.globalControls, 'global' )\r\n        } else {\r\n            const widgetName = widgets[type].widgetAttribute.name;\r\n            jQuery('.panel--info').text( widgetName );\r\n            this.createControlMarkup( widgets[type], uid )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Create Widgets Markup for sidebar \r\n     * \r\n     */ \r\n    createWidget() {\r\n        this.createWidgetMarkup()\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * On saving content \r\n     * \r\n     */ \r\n    onSaveChanges() {\r\n\r\n        const btn = jQuery('.save-changes-btn');\r\n        btn.on( 'click', function() {\r\n            btn.addClass('is-loading');\r\n            const markup  = jQuery('.alpha-popup-builder').parent().html();\r\n            cssom.getCSS().then( css => {\r\n                jQuery.ajax({\r\n                    type: \"POST\",\r\n                    data: {\r\n                        action: 'save',\r\n                        css: JSON.stringify( css ),\r\n                        html: JSON.stringify( markup ),\r\n                        storage: JSON.stringify( state.get() )\r\n                    },\r\n                    url: 'http://localhost/popup-host/' + 'storage/index.php',\r\n                    success: function(){\r\n                        setTimeout(()=>{\r\n                            btn.removeClass('is-loading');\r\n                        },1000)\r\n                    }\r\n                });\r\n            })\r\n        })\r\n    }\r\n\r\n    onDropWidget( widget, position ) {\r\n        Utility.uid().then( wrapperId => {\r\n            \r\n            const { name, id, render } = widget.widgetAttribute;\r\n            state.add(wrapperId, {})\r\n\r\n            // generate markup \r\n            if( typeof render === 'function' ) {\r\n                const markup = render( wrapperId );\r\n                jQuery('.alpha-popup-builder .apb-wrapper').append(markup)\r\n                jQuery('.apb-' + wrapperId).css(position)\r\n                jQuery('.popup-widget-element').draggable({ containment: 'parent' })\r\n                jQuery('.panel--info').text(name);                \r\n                Utility.applyControl( widget, wrapperId  ) // generate style from default values\r\n\r\n            }\r\n        }) // end of promise\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Drop widget \r\n     * \r\n     */ \r\n    dropWidget( self ) {\r\n        //make widget panel element dragable\r\n        jQuery('.popup-widget').draggable({\r\n            helper: 'clone'\r\n        })\r\n\r\n        // make preview panel widget draggable\r\n        const container = jQuery(document).find(\".alpha-popup-builder\");\r\n        container.droppable({\r\n            accept: '.popup-widget', \r\n            drop: function( event, ui ) {\r\n                const parent    = jQuery(this).position();\r\n                const type      = ui.draggable.data('type');\r\n                const position  = {\r\n                    left: ui.position.left - parent.left,\r\n                    top: ui.position.top - parent.top,\r\n                }\r\n\r\n                self.onDropWidget( widgets[type], position );\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Remove Widget \r\n     * \r\n     */ \r\n    removeWidget( ) {\r\n        jQuery(document).on('click', '.remove-btn', function(ev){\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n            const element   = jQuery(this).parent();\r\n            const uid       = element.data('uid')\r\n            const widgetId  = element.attr('id');\r\n            const widget    = widgets[widgetId]\r\n            Utility.removeControl(widget, uid)\r\n            element.remove();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Load Saved markup \r\n     * \r\n     */ \r\n    loadSavedMarkup() {\r\n\r\n        const self = this;\r\n        fetch( 'http://localhost/popup-host/' + 'storage/index.php?all')\r\n        .then( response => response.json())\r\n        .then( response => {\r\n            \r\n            const { html, storage } = response.body;\r\n\r\n            if( storage ) {\r\n                state.set( JSON.parse( storage ) )\r\n            }\r\n\r\n            if( html ) {\r\n                // load the markup into the dom\r\n                jQuery('.alpha-popup-builder').parent().html(JSON.parse(html));\r\n                // restore saved css \r\n                jQuery('.popup-widget-element').each( (i, item) =>{\r\n                    const wrapperId     = item.dataset.uid;\r\n                    const widgetConfig  = widgets[item.id]\r\n                    Utility.applyControl( widgetConfig, wrapperId )\r\n                })\r\n                // enable drag and drop \r\n                self.dropWidget( self );\r\n                jQuery('.popup-widget-element').draggable({ containment: 'parent' })\r\n            }\r\n\r\n            /**\r\n             * \r\n             * After loading the entire saved markup and style load the drag and drop functionility\r\n             * \r\n             */ \r\n            self.init.call( self );\r\n            \r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * Initalize customizer script\r\n     * \r\n     */ \r\n    init() {\r\n\r\n        const self = this;\r\n        self.globalControls = new GlobalControls();\r\n        self.sidebarInit();\r\n        self.createControls('popup-settings');\r\n        self.createWidget();\r\n        self.onSaveChanges();\r\n        self.dropWidget( self );\r\n        self.removeWidget( self );\r\n\r\n        // change sidebar markup based on what settings user want \r\n        jQuery(document).on('click', '.aside-btn, .popup-widget-element', function(ev) {\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n            \r\n            const type = this.dataset.type;\r\n            // toggle the active class\r\n            if( ['popup-settings', 'widget-settings'].includes(type) ) {\r\n                jQuery('.aside-btn').removeClass('active');\r\n                this.classList.add('active');\r\n            }\r\n\r\n            switch( type ) {\r\n                case 'popup-settings': // when popup settings button clicked\r\n                self.createControls.call(self, type);\r\n                jQuery('.panel--info').text('Popup Settings');\r\n                break;\r\n                \r\n                case 'widget-settings': // when all widgets button clicked\r\n                jQuery('.panel--info').text('Widgets List');\r\n                self.createWidget.call(self, type);\r\n                break;\r\n                \r\n                case 'widget': // when individual widget is clicked\r\n                jQuery('.aside-btn').removeClass('active');\r\n                self.createControls.call(self, this.id, this.dataset.uid);\r\n                break;\r\n            }\r\n\r\n            // update scrollbar \r\n            self.sidebarSettings.ps.update()\r\n            self.dropWidget( self );\r\n            self.removeWidget( self );\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\nnew Customizer();","import ControlBase from \"./base\";\r\nimport state from \"./state\";\r\nimport widgets from \"../widgets\";\r\nimport cssom from './cssom';\r\n\r\nexport default class Sidebar {\r\n    \r\n    sidebarSettings = {\r\n        wheelSpeed: 2,\r\n        wheelPropagation: true,\r\n        minScrollbarLength: 20\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * attach perfect scrollbar plugin into sidebar \r\n     */ \r\n    sidebarInit() {\r\n        const ps  = new PerfectScrollbar('.aside__container', this.sidebarSettings );\r\n        this.sidebarSettings.ps = ps;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create markup for controls \r\n     * @param config refers to the controls of the widget\r\n     * @param uid refers to unique key. This unique get is generated when any widget is droped\r\n     * \r\n     */ \r\n    createControlMarkup( config, uid ) {\r\n\r\n        const storage = state.get();\r\n        const data = storage[uid];\r\n        const wrapper = '.apb-' + uid;\r\n\r\n        // generate control markup\r\n        const componentMarkup = Object.keys(config).map( key => {\r\n            const attr = config[key];\r\n            const component = ControlBase[attr.type]\r\n            let value = '';\r\n            \r\n            if( !component ) {\r\n                return '';\r\n            }\r\n\r\n\r\n            // use already saved values\r\n            if( !Reflect.has( data, key ) ) {\r\n                data[key] = attr.default;\r\n                value = data[key];\r\n            } else {\r\n                value = data[key];\r\n            }\r\n\r\n            // generate css\r\n            const initialStyle = attr.selector( wrapper, value );\r\n            if( initialStyle ) {\r\n                const { selector, style } = cssom.seperateStyle( initialStyle );\r\n                cssom.insert(selector, style)\r\n            }\r\n\r\n            return `\r\n                <div class=\"control-item\" data-inline=\"${attr.isLabelInline}\">\r\n                    <label> ${ attr.label } </label>\r\n                    <div class=\"control-item--field field-type-${attr.type}\">\r\n                        ${component({...attr, default: value}, key)}\r\n                    </div>\r\n                </div>\r\n            `\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.aside__container').html( `\r\n            <div class=\"control-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n\r\n        /**\r\n         * \r\n         * \r\n         * on input change\r\n         * This event is responsible to chapter the changes of any control input changes \r\n         * \r\n         */ \r\n        jQuery('.popup-control--trigger').on('input', function(ev) {\r\n            \r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n\r\n            const value = this.value;\r\n            const key   = this.dataset.key\r\n\r\n            data[key] = value;\r\n            const createStyle = config[key].selector( wrapper, data[key] );\r\n\r\n            if( createStyle ) {\r\n                const { selector, style } = cssom.seperateStyle( createStyle );\r\n                cssom.insert(selector, style)\r\n            }\r\n\r\n            //update range slider value\r\n            if( this.type === 'range' ) {\r\n                this.nextElementSibling.innerText = value + 'px'\r\n            }\r\n\r\n        })\r\n        \r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create widget markup \r\n     * \r\n     */ \r\n    createWidgetMarkup( ) {\r\n\r\n        const componentMarkup = Object.keys( widgets ).map( key => {\r\n            const { widgetAttribute } = widgets[key];\r\n            return `\r\n            <div class=\"popup-element\" id=\"${widgetAttribute.id}\">\r\n                <div class=\"popup-widget\" draggable=\"true\" data-type=\"${key}\">\r\n                    <span class=\"material-icons-outlined\">${widgetAttribute.icon}</span>\r\n                    <label>${widgetAttribute.name}</label>\r\n                </div>\r\n            </div>`\r\n        })\r\n\r\n        // render the markup into the sidebar\r\n        jQuery('.aside__container').html( `\r\n            <div class=\"widget-container\">\r\n                ${componentMarkup.join('')}\r\n            </div>\r\n        ` );\r\n    }\r\n\r\n\r\n}"],"names":["ControlBase","config","constructor","self","this","setWidgetAttribute","widgetAttribute","render","bind","registerControls","apply","addControl","id","props","isLabelInline","key","default","Object","keys","options","map","item","join","max","step","STORAGE","global","get","target","set","value","add","property","remove","text_widget","super","icon","name","label","type","selector","wrapper","scope","jQuery","length","find","text","left","center","right","wrapper_id","text_content","star_widget","rule","styleSheetId","fetchStylesheet","seperateStyle","initialStyle","split","trim","replace","style","getCSS","Promise","resolve","reject","css","document","getElementById","innerText","delete","selectors","insert","newStyle","index","sheet","rules","isImportant","includes","setProperty","cssText","insertRule","cssDeclaration","str","pop","mergeRule","i","prevStyle","nextRule","nextStyle","reverse","selectorText","Reflect","has","deleteRule","GlobalControls","Utility","store","generateUID","uid","Math","floor","random","widget","data","entries","prop","attr","Set","Array","from","sidebarSettings","wheelSpeed","wheelPropagation","minScrollbarLength","sidebarInit","ps","PerfectScrollbar","createControlMarkup","componentMarkup","component","html","on","ev","preventDefault","stopPropagation","dataset","createStyle","nextElementSibling","createWidgetMarkup","window","addEventListener","loadSavedMarkup","createControls","globalControls","widgetName","createWidget","onSaveChanges","btn","addClass","markup","parent","then","ajax","action","JSON","stringify","storage","url","success","setTimeout","removeClass","onDropWidget","position","wrapperId","append","draggable","containment","applyControl","dropWidget","helper","droppable","accept","drop","event","ui","top","removeWidget","element","widgetId","removeControl","fetch","response","json","body","parse","each","widgetConfig","init","call","classList","update"],"sourceRoot":""}